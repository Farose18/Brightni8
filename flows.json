[
    {
        "id": "5a82bc456a4aaf73",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "83429a095b8e7310",
        "type": "tab",
        "label": "scaback IoT 6.6",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "7d395c56b48222aa",
        "type": "tab",
        "label": "RD - WD (MQTT) ENG01",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "e93d40648a0e86e8",
        "type": "tab",
        "label": "CR_EM01",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "0dc0138bb7f97736",
        "type": "tab",
        "label": "CSV",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "d85bbcee29cc1f0f",
        "type": "mqtt-broker",
        "name": "",
        "broker": "localhost",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "9f60afb136905ef4",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": "8086",
        "protocol": "http",
        "database": "database",
        "name": "",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "2.0",
        "url": "http://localhost:8086",
        "rejectUnauthorized": true
    },
    {
        "id": "3ea78ba576f26c08",
        "type": "amqp-broker",
        "name": "",
        "host": "localhost",
        "port": "5672",
        "vhost": "",
        "tls": false,
        "credsFromSettings": false
    },
    {
        "id": "33f460a4c4855dbc",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": "8086",
        "protocol": "http",
        "database": "database",
        "name": "",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "2.0",
        "url": "http://localhost:8086",
        "rejectUnauthorized": true
    },
    {
        "id": "e51f9084c202c559",
        "type": "amqp-broker",
        "name": "",
        "host": "localhost",
        "port": "5672",
        "vhost": "",
        "tls": false,
        "credsFromSettings": false
    },
    {
        "id": "c9887aea6b7f447e",
        "type": "mqtt-broker",
        "name": "",
        "broker": "localhost",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "7129c50f31c7aaad",
        "type": "tls-config",
        "name": "",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "",
        "keyname": "",
        "caname": "",
        "servername": "",
        "verifyservercert": false,
        "alpnprotocol": ""
    },
    {
        "id": "d2633252440133bc",
        "type": "modbus-client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": false,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "192.168.85.101",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "13a01c4658707154",
        "type": "modbus-client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": false,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "172.20.1.101",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "3e05c22a77dd093f",
        "type": "modbus-client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": false,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "192.168.85.102",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "044fb8caa1853e84",
        "type": "modbus-client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": false,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "172.20.1.102",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "f934529df73e8d14",
        "type": "modbus-client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "192.168.84.65",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": 1,
        "commandDelay": 1,
        "clientTimeout": 1000,
        "reconnectOnTimeout": true,
        "reconnectTimeout": 2000,
        "parallelUnitIdsAllowed": true,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "60512af24eef02f1",
        "type": "modbus-client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "192.168.84.31",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": true,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "8f265a886e6961bc",
        "type": "tls-config",
        "name": "",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "",
        "keyname": "",
        "caname": "",
        "servername": "",
        "verifyservercert": false,
        "alpnprotocol": ""
    },
    {
        "id": "c2755f97b9d0d1d7",
        "type": "modbus-client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "192.168.84.66",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": true,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "47adbac7b200fd83",
        "type": "modbus-client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "192.168.84.32",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": true,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "3de41e69d7b08533",
        "type": "tls-config",
        "name": "",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "",
        "keyname": "",
        "caname": "",
        "servername": "",
        "verifyservercert": false,
        "alpnprotocol": ""
    },
    {
        "id": "e21bf551feb49ad7",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": "8086",
        "protocol": "http",
        "database": "database",
        "name": "",
        "usetls": false,
        "tls": "7129c50f31c7aaad",
        "influxdbVersion": "2.0",
        "url": "http://localhost:8086",
        "rejectUnauthorized": true
    },
    {
        "id": "108373536e589d3a",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": "8086",
        "protocol": "http",
        "database": "database",
        "name": "Indigrid",
        "usetls": false,
        "tls": "8f265a886e6961bc",
        "influxdbVersion": "2.0",
        "url": "http://localhost:8086",
        "rejectUnauthorized": true
    },
    {
        "id": "0a785d54c11d0d69",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": "8086",
        "protocol": "http",
        "database": "database",
        "name": "Indigrid",
        "usetls": false,
        "tls": "3de41e69d7b08533",
        "influxdbVersion": "2.0",
        "url": "http://localhost:8086",
        "rejectUnauthorized": true
    },
    {
        "id": "b21533cfab34fe78",
        "type": "postgresdb",
        "cfgname": "postgres",
        "hostname": "localhost",
        "port": "5432",
        "db": "postgres",
        "ssl": false
    },
    {
        "id": "5bb2b893dbcabe41",
        "type": "mqtt-broker",
        "name": "",
        "broker": "192.168.90.84",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "499e7b92ba638445",
        "type": "modbus-client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": false,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "192.168.87.156",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": 1,
        "commandDelay": 1,
        "clientTimeout": 1000,
        "reconnectOnTimeout": true,
        "reconnectTimeout": 2000,
        "parallelUnitIdsAllowed": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "1a3bde724353a574",
        "type": "mqtt-broker",
        "name": "",
        "broker": "192.168.90.84",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "a7c525fdc0a20cb6",
        "type": "modbus-client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": false,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "192.168.87.157",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "99df7facbe547441",
        "type": "modbus-client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": true,
        "queueLogEnabled": true,
        "failureLogEnabled": true,
        "tcpHost": "192.168.87.159",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "dcc280f930b62a12",
        "type": "mqtt-broker",
        "name": "",
        "broker": "localhost",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "fe373b9143a9dd80",
        "type": "tls-config",
        "name": "",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "",
        "keyname": "",
        "caname": "",
        "servername": "",
        "verifyservercert": false,
        "alpnprotocol": ""
    },
    {
        "id": "cf7d573f94969811",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": "8086",
        "protocol": "http",
        "database": "database",
        "name": "",
        "usetls": false,
        "tls": "fe373b9143a9dd80",
        "influxdbVersion": "2.0",
        "url": "http://localhost:8086",
        "rejectUnauthorized": true
    },
    {
        "id": "46ffdba9d0086f9d",
        "type": "modbus-client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "192.168.90.171",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "a7fc96691f1f121a",
        "type": "modbus-client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "192.168.88.159",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": true,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "866db6e1ba9187ed",
        "type": "modbus-client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "192.168.88.157",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": true,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "4abfff5724dcbdfa",
        "type": "postgresdb",
        "cfgname": "",
        "hostname": "localhost",
        "port": "5432",
        "db": "postgres",
        "ssl": false
    },
    {
        "id": "86e5077df813d4af",
        "type": "modbus-client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "192.168.88.155",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": true,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "c886e88dde2c1277",
        "type": "modbus-client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "192.168.88.65",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": true,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "e1ec8b713566e44c",
        "type": "modbus-client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "192.168.90.172",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "ea93775ef57af882",
        "type": "modbus-client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "192.168.1.5",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "205f2520a9445d29",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": "8086",
        "protocol": "http",
        "database": "database",
        "name": "Indigrid",
        "usetls": false,
        "tls": "9fd28734fd453243",
        "influxdbVersion": "2.0",
        "url": "http://localhost:8086",
        "rejectUnauthorized": true
    },
    {
        "id": "9fd28734fd453243",
        "type": "tls-config",
        "name": "",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "",
        "keyname": "",
        "caname": "",
        "servername": "",
        "verifyservercert": false,
        "alpnprotocol": ""
    },
    {
        "id": "9dc8afa5e7f01d96",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#0094CE",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#0094CE",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#1bbfff",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#0094ce",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "55af3b15fafa1ce8",
        "type": "ui_tab",
        "name": "PPC_EM01_SETPOINT_SET",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "af6945031e13e295",
        "type": "ui_group",
        "name": "PPC_EM01_SET_VALUES",
        "tab": "55af3b15fafa1ce8",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "df745a17db2525a8",
        "type": "ui_group",
        "name": "PPC_EM01_READ_VALUES",
        "tab": "55af3b15fafa1ce8",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "8decb3498592097b",
        "type": "ui_group",
        "name": "PPC_EM01_SETPOINT_SET",
        "tab": "55af3b15fafa1ce8",
        "order": 3,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "2bead165cb8d8048",
        "type": "Modbus-Client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "172.16.0.55",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "8c365d7c97d6c87b",
        "type": "modbus-client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "192.168.77.43",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "7ee444d2209a34f1",
        "type": "influxdb",
        "hostname": "192.168.0.127",
        "port": "8086",
        "protocol": "http",
        "database": "iSolar",
        "name": "influx",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "2.0",
        "url": "http://localhost:8086",
        "rejectUnauthorized": true
    },
    {
        "id": "8ba65460e8b9e662",
        "type": "Modbus-Client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "192.168.1.2",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "3a110148bcaa8721",
        "type": "Modbus-Client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "192.168.1.7",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "a08816a347a93d2f",
        "type": "modbus-client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "192.168.90.181",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": true,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "4d0a4b6e68dc80a9",
        "type": "modbus-client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "192.168.90.182",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": true,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "c659663e7fa37ca3",
        "type": "mqtt-broker",
        "name": "",
        "broker": "192.168.88.82",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "337869075f20d914",
        "type": "modbus-client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": false,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "192.168.87.156",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": 1,
        "commandDelay": 1,
        "clientTimeout": 1000,
        "reconnectOnTimeout": true,
        "reconnectTimeout": 2000,
        "parallelUnitIdsAllowed": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "63de6f666b7bc0ec",
        "type": "mqtt-broker",
        "name": "",
        "broker": "192.168.88.82",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "051fd2892f0486d9",
        "type": "modbus-client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": false,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "192.168.87.157",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "287f71876a67a460",
        "type": "modbus-client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": true,
        "queueLogEnabled": true,
        "failureLogEnabled": true,
        "tcpHost": "192.168.87.159",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "21516cf528174986",
        "type": "mqtt-broker",
        "name": "",
        "broker": "localhost",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "b291a6c1548a6858",
        "type": "tls-config",
        "name": "",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "",
        "keyname": "",
        "caname": "",
        "servername": "",
        "verifyservercert": false,
        "alpnprotocol": ""
    },
    {
        "id": "308389a035161b62",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": "8086",
        "protocol": "http",
        "database": "database",
        "name": "",
        "usetls": false,
        "tls": "b291a6c1548a6858",
        "influxdbVersion": "2.0",
        "url": "http://localhost:8086",
        "rejectUnauthorized": true
    },
    {
        "id": "faac30432cd8c710",
        "type": "modbus-client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "192.168.88.154",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": 1,
        "commandDelay": 1,
        "clientTimeout": 1000,
        "reconnectOnTimeout": true,
        "reconnectTimeout": 2000,
        "parallelUnitIdsAllowed": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "c1efd73755369c0e",
        "type": "modbus-client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "192.168.88.159",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": true,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "3e7ec68cdfc4cb46",
        "type": "modbus-client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "192.168.88.157",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": true,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "55a223726c23b416",
        "type": "postgresdb",
        "cfgname": "",
        "hostname": "localhost",
        "port": "5432",
        "db": "postgres",
        "ssl": false
    },
    {
        "id": "0453608ddc3627f0",
        "type": "modbus-client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "192.168.88.155",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": true,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "991c26b26af7c2a4",
        "type": "ui_group",
        "name": "PPC_EM01_SET_VALUES",
        "tab": "91ed7591e8bf6921",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "91ed7591e8bf6921",
        "type": "ui_tab",
        "name": "PPC_EM01_SETPOINT_SET",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "22eb3e383e9a3813",
        "type": "ui_group",
        "name": "PPC_EM01_READ_VALUES",
        "tab": "91ed7591e8bf6921",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "2ab5e042b1fd7509",
        "type": "ui_group",
        "name": "PPC_EM01_SETPOINT_SET",
        "tab": "91ed7591e8bf6921",
        "order": 3,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "87c2a1500e3a2a5c",
        "type": "modbus-client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "192.168.88.65",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": true,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "a0f6994cbe5b3557",
        "type": "modbus-client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "192.168.88.65",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "19b2250b9e9350be",
        "type": "modbus-client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "192.168.1.5",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "71e87d76e617c184",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": "8086",
        "protocol": "http",
        "database": "database",
        "name": "Indigrid",
        "usetls": false,
        "tls": "d88b2c71fc265671",
        "influxdbVersion": "2.0",
        "url": "http://localhost:8086",
        "rejectUnauthorized": true
    },
    {
        "id": "d88b2c71fc265671",
        "type": "tls-config",
        "name": "",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "",
        "keyname": "",
        "caname": "",
        "servername": "",
        "verifyservercert": false,
        "alpnprotocol": ""
    },
    {
        "id": "d657935bf6688d86",
        "type": "fs-ops-dir",
        "z": "83429a095b8e7310",
        "name": "",
        "path": "/mnt/docker_common/scaback",
        "pathType": "str",
        "filter": "*",
        "filterType": "str",
        "dir": "payload",
        "dirType": "msg",
        "x": 360,
        "y": 420,
        "wires": [
            [
                "d54641c37799e447"
            ]
        ]
    },
    {
        "id": "c37b3804565ed723",
        "type": "file in",
        "z": "83429a095b8e7310",
        "name": "scaback",
        "filename": "filename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 660,
        "y": 400,
        "wires": [
            [
                "8c7accad73712eba"
            ]
        ]
    },
    {
        "id": "8c7accad73712eba",
        "type": "csv",
        "z": "83429a095b8e7310",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 790,
        "y": 400,
        "wires": [
            [
                "b6f86aff384cc3b2"
            ]
        ]
    },
    {
        "id": "08f726400caae702",
        "type": "template",
        "z": "83429a095b8e7310",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "fields,unit\nA.Ms.Watt,kW\nAlimTemperature,DEGC\nAT,DEGC\nAT_15,DEGC\nAT_60,DEGC\nB.Ms.Watt,kW\nBATT,\nBR,V\nCosPhi,\nE-Total,kWh\nEA+,kWh\nEA-,kWh\nEAF+,kWh\nEAF-,kWh\nEP+,kWh\nEP-,kWh\nEQ+lag,kWh\nEQ+lead,kWh\nEQ-lag,kWh\nEQ-lead,kWh\nEQC+,kWh\nEQC-,kWh\nEQI+,kWh\nEQI-,kWh\nES+,kWh\nES-,kWh\nE_DAY,kWh\nE_Month,kWh\nE_partial,kWh\nE_Q,kWh\nE_S,kWh\nE_Total,kWh\nE_Total_G,kWh\nE_Total_RAW,kWh\nE_WEEK,kWh\nE_YEAR,kWh\nFAC,Hz\nFac-delta+,Hz\nFac-delta+Fast,Hz\nFac-delta-,Hz\nFac-delta-Fast,Hz\nFac-Limit,Hz\nFac-Max-Fast-Tm,s\nFac-Max-Tm,s\nFac-Min-Fast-Tm,s\nFac-Min-Tm,s\nFac-Srr,Hz\nFac-Start,Hz\nFAC1,Hz\nFAC2,Hz\nFAC3,Hz\nFactory-Test,\nFAC_10MW,Hz\nFAC_20MW,Hz\nFAC_2MW,Hz\nFAC_MV,Hz\nFanA1Speed,rpm\nFanA2Speed,rpm\nFanA3Speed,rpm\nFanB1Speed,rpm\nFanB2Speed,rpm\nFanB3Speed,rpm\nFanB4Speed,rpm\nFREQ,Hz\nFWDSECONDS,s\nh-on,h\nh-Total,h\nHeatsinkTemperature,DEGC\nIAC,A\nIac-Ist,A\nIac-Soll,A\nIAC1,A\nIAC1_avg5min,A\nIAC2,A\nIAC2_avg5min,A\nIAC3,A\nIAC3_avg5min,A\nIACN,A\nIAC_alarm,A\nIAC_avg5min,A\nIAC_mean,A\nIDC,A\nIDC01,A\nIDC02,A\nIDC03,A\nIDC04,A\nIDC05,A\nIDC06,A\nIDC07,A\nIDC08,A\nIDC09,A\nIDC10,A\nIDC11,A\nIDC12,A\nIDC13,A\nIDC14,A\nIDC15,A\nIDC16,A\nIDC1,A\nIDC1_Alarm,\nIDC1_Alrm,\nIDC1_avg1min,A\nIDC1_avg5min,A\nIDC1_max,A\nIDC2,A\nIDC2_Alarm,\nIDC2_Alrm,\nIDC2_avg1min,A\nIDC2_avg5min,A\nIDC2_max,A\nIDC3,A\nIDC3_Alarm,\nIDC3_Alrm,\nIDC3_avg1min,A\nIDC3_avg5min,A\nIDC4,A\nIDC4_Alarm,\nIDC4_Alrm,\nIDC4_avg1min,A\nIDC4_avg5min,A\nIDC5,A\nIDC5_Alarm,\nIDC5_Alrm,\nIDC5_avg1min,A\nIDC5_avg5min,A\nIDC6,A\nIDC6_Alarm,\nIDC6_Alrm,\nIDC6_avg1min,A\nIDC6_avg5min,A\nIDC7,A\nIDC8,A\nIDC9,A\nIDCTotal,A\nIDC_avg5min,A\nIDC_load,A\nIDC_now,A\nIDC_total_load,A\nIpv,A\nIscr_1,A\nIscr_15,A\nIscr_5,A\nIsc_1,A\nIsc_15,A\nIsc_5,A\nIX_hi,\nIX_lo,\nKVAH,kVAh\nMF_hi,\nMF_lo,\nOpHrs,h\nOpHrs_Day,h\nPAC,kW\nPAC1,kW\nPAC1_MV,kW\nPAC2,kW\nPAC2_MV,kW\nPAC3,kW\nPAC3_MV,kW\nPACA,kW\nPACB,kW\nPACC,kW\nPAC_10,kW\nPAC_avg5min,kW\nPAC_float,kW\nPAC_HIGH,kW\nPAC_IN1_R1,kW\nPAC_IN2_R1,kW\nPAC_LF_10MW,kW\nPAC_LF_20MW,kW\nPAC_LF_2MW,kW\nPAC_LOW,kW\nPAC_MAX,kW\nPAC_MAX_TIME,kW\nPAC_MIN,kW\nPAC_MV,kW\nPAC_OUT_R1,kW\nPAC_STF1_20MW,kW\nPAC_STF2_20MW,kW\nPDC,kW\nPDC1,kW\nPDC2,kW\nPDC3,kW\nPDC_avg5min,kW\nPF,\nPHI1,DEG\nPHI2,DEG\nPHI3,DEG\nPKT,kW\nPX_hi,\nPX_lo,\nQAC,kVAr\nRH,%\nRH_15,%\nRH_60,%\nRUN_HOUR,h\nRY,V\nSAC,kVA\nSac,kVA\nSoilingCalcState_1,\nSoilingCalcState_15,\nSoilingCalcState_5,\nSoilingLoss_1,%\nSoilingLoss_15,%\nSoilingLoss_5,%\nSR1,W/mSQUA\nSR1_15,W/mSQUA\nSR1_60,W/mSQUA\nSR2,W/mSQUA\nSR2_15,W/mSQUA\nSR2_60,W/mSQUA\nSUN_24,h\nSUN_60,h\nT1,DEGC\nT2,DEGC\nT3,DEGC\nT3_300,DEGC\nT3_900,DEGC\nT3_R,DEGC\nT4,DEGC\nTref_1,DEGC\nTref_15,DEGC\nTref_5,DEGC\nTsoil_1,DEGC\nTsoil_15,DEGC\nTsoil_5,DEGC\nTSP,DEGC\nTSP_15,DEGC\nTSP_24,DEGC\nTSP_60,DEGC\nU1,\nU1_300,W/mSQUA\nU1_900,W/mSQUA\nU1_R,W/mSQUA\nU2,V\nU2_300,V\nU2_900,V\nU2_R,V\nU3,V\nU4,V\nU4_300,W/mSQUA\nU4_900,W/mSQUA\nU4_R,W/mSQUA\nUAC,V\nUac-BFR-Fakt,\nUac-Max,V\nUac-Max-Fast,V\nUac-Max-Fast-Tm,V\nUac-Max-Tm,V\nUac-Min-Fast,V\nUac-Min,V\nUac-Min-Fast-Tm,s\nUac-Min-Tm,s\nUac-Srr,V\nUac-SRR-Fakt,V\nUAC1,V\nUAC2,V\nUAC3,V\nUAC12,V\nUAC23,V\nUAC31,V\nUAC_10MW,V\nUAC_20MW,V\nUAC_2MW,V\nUDC,V\nUDC1,V\nUDC2,V\nUDC3,V\nUDC4,V\nUDC_av5min,V\nUDC_avg5min,V\nUpv-Ist,\nVBulk+,V\nVBulk-,V\nVX_hi,\nVX_lo,\nWD,DEG\nWD_15,DEG\nWD_15_Sig,\nWD_60,DEG\nWD_60_Sig,\nWS,m/s\nWS_15,m/s\nWS_15_Max,m/s\nWS_60,m/s\nWS_60_Max,m/s\nYB,V\n\n",
        "output": "str",
        "x": 660,
        "y": 440,
        "wires": [
            [
                "c0f6187a26ecdf2e"
            ]
        ]
    },
    {
        "id": "c0f6187a26ecdf2e",
        "type": "csv",
        "z": "83429a095b8e7310",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 790,
        "y": 440,
        "wires": [
            [
                "0ae0505712766f25"
            ]
        ]
    },
    {
        "id": "b6f86aff384cc3b2",
        "type": "change",
        "z": "83429a095b8e7310",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "scaback",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 930,
        "y": 400,
        "wires": [
            [
                "c37955dc33d4882d",
                "df0947756db2569e"
            ]
        ]
    },
    {
        "id": "0ae0505712766f25",
        "type": "change",
        "z": "83429a095b8e7310",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "unit",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 930,
        "y": 440,
        "wires": [
            [
                "c37955dc33d4882d"
            ]
        ]
    },
    {
        "id": "c37955dc33d4882d",
        "type": "function",
        "z": "83429a095b8e7310",
        "name": "combine",
        "func": "context.data = context.data || {};\nswitch (msg.topic) {\n    case \"scaback\":\n        context.data.scaback = msg.payload;\n        msg = null;\n        break;\n    case \"unit\":\n        context.data.unit = msg.payload;\n        msg = null;\n        break;\n}\nif (context.data.scaback != null && context.data.unit != null) {\n    var data_combine = {\n        \"scaback\": context.data.scaback,\n        \"unit\": context.data.unit\n\n    }\n    context.data = null\n    return { payload: data_combine };\n}  ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1080,
        "y": 420,
        "wires": [
            [
                "fc59e3d0c8cd4a64",
                "0be0a1cfe247985c"
            ]
        ]
    },
    {
        "id": "d18a52f4ba620804",
        "type": "comment",
        "z": "83429a095b8e7310",
        "name": "Scaback Data Flow",
        "info": "",
        "x": 210,
        "y": 380,
        "wires": []
    },
    {
        "id": "d54641c37799e447",
        "type": "function",
        "z": "83429a095b8e7310",
        "name": "file to read",
        "func": "const delete_array = flow.get(\"delete_array\")\nvar send_file=msg.payload.filename\nfor (var i = 0; i < msg.payload.length; i++) {\n    for (var j = 0; j < delete_array.length; j++) {\n        if (msg.payload[i] != delete_array[j])\n        {\n          msg.filename = \"/mnt/docker_common/scaback/\" + msg.payload[i]\n          node.send(msg)\n       \n        }\n        return null\n    }\n    return null \n}\nreturn null",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 420,
        "wires": [
            [
                "443af0251ac89465",
                "c37b3804565ed723",
                "08f726400caae702"
            ]
        ]
    },
    {
        "id": "fadeb193fb941700",
        "type": "tcp request",
        "z": "83429a095b8e7310",
        "name": "influx status",
        "server": "localhost",
        "port": "8086",
        "out": "sit",
        "ret": "buffer",
        "splitc": " ",
        "newline": "",
        "trim": false,
        "tls": "",
        "x": 370,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "0a0a590c2941b9c3",
        "type": "inject",
        "z": "83429a095b8e7310",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "0.1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 210,
        "y": 260,
        "wires": [
            [
                "fadeb193fb941700"
            ]
        ]
    },
    {
        "id": "fc59e3d0c8cd4a64",
        "type": "function",
        "z": "83429a095b8e7310",
        "name": "comparison",
        "func": "var status = flow.get(\"influx-status\")\nif (status.fill == 'green') {\n    var plantobj = []\n    for (var i = 0; i < msg.payload.scaback.length; i++) {\n        if ((msg.payload.scaback[i].value != \"NaN\") && (msg.payload.scaback[i].value != \"nan\") && (msg.payload.scaback[i].value != \"inf\") && (msg.payload.scaback[i].value != \"-inf\")) {\n            var dateUTC1 = msg.payload.scaback[i].ts //).toISOString().slice(0, 19);\n            var p = \"INDIGRID\"\n            var b;\n            var bd;\n            var d;\n            var dd;\n            var dt;\n            var f;\n            var fd;\n            var h = \"server8481\"\n            var iid;\n            var value;\n            var text = \"\"\n            var qu = 0\n            var u;\n            for (var j = 0; j < msg.payload.unit.length; j++) {\n                var f_ref = msg.payload.unit[j].fields\n                b = msg.payload.scaback[i].blockname\n                d = msg.payload.scaback[i].dev\n                dd = b + \"_\" + d\n                f = msg.payload.scaback[i].chn\n                fd = msg.payload.scaback[i].chn\n                iid = msg.payload.scaback[i][\"#id\"]\n                value = msg.payload.scaback[i].value\n                if (b.match(\"B\")) { bd = b.replace(/B/g, \"BLOCK_\"); }\n                if (b.match(\"WS\")) { bd = \"WS\" } else { bd = b }\n                if (d.match(\"EM\")) { dt = \"EM\" }\n                if (d.match(\"INV\")) { dt = \"INV\" }\n                if (d.match(\"IO\")) { dt = \"IO\" }\n                if (d.match(\"WS\")) { dt = \"WS\" }\n                if (f == f_ref) { u = msg.payload.unit[j].unit; break; }\n                else { u = \"\" }\n\n            }\n            var obj = {\n                Time: dateUTC1,\n                value,\n                qu,\n                text,\n                b,\n                bd,\n                d,\n                dd,\n                dt,\n                f,\n                fd,\n                h,\n                iid,\n                m: 1,\n                p,\n                u\n            }\n            plantobj.push(obj)\n        }\n    }\n    msg.payload = plantobj\n    return msg;\n}\nelse { return null; }",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1230,
        "y": 420,
        "wires": [
            [
                "cbc45541d06386f5",
                "6ea236565a250898"
            ]
        ]
    },
    {
        "id": "ebc5924e0de59c64",
        "type": "fs-ops-delete",
        "z": "83429a095b8e7310",
        "name": "",
        "path": "/mnt/docker_common/scaback",
        "pathType": "str",
        "filename": "payload",
        "filenameType": "msg",
        "x": 1230,
        "y": 380,
        "wires": [
            [
                "a51b803a09f0a51e"
            ]
        ]
    },
    {
        "id": "443af0251ac89465",
        "type": "debug",
        "z": "83429a095b8e7310",
        "name": "debug 83",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 660,
        "y": 360,
        "wires": []
    },
    {
        "id": "40ee5241045ae9fb",
        "type": "change",
        "z": "83429a095b8e7310",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "delete_array",
                "pt": "flow",
                "to": "[\"scabackFast_1690871836559.csv.unsent\"]",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1300,
        "y": 260,
        "wires": [
            [
                "b1d2064fa2d108e3"
            ]
        ]
    },
    {
        "id": "0b240afc979492a6",
        "type": "inject",
        "z": "83429a095b8e7310",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1110,
        "y": 260,
        "wires": [
            [
                "40ee5241045ae9fb"
            ]
        ]
    },
    {
        "id": "6ac452a7af4a24ca",
        "type": "debug",
        "z": "83429a095b8e7310",
        "name": "debug 86",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1560,
        "y": 380,
        "wires": []
    },
    {
        "id": "bc469a8ec396b039",
        "type": "inject",
        "z": "83429a095b8e7310",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "0.2",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 210,
        "y": 420,
        "wires": [
            [
                "d657935bf6688d86"
            ]
        ]
    },
    {
        "id": "a51b803a09f0a51e",
        "type": "function",
        "z": "83429a095b8e7310",
        "name": "function 130",
        "func": "const delete_array = flow.get(\"delete_array\");\n\ndelete_array.push(msg.payload)\nflow.set(\"delete_array\", delete_array)\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1410,
        "y": 380,
        "wires": [
            [
                "6ac452a7af4a24ca"
            ]
        ]
    },
    {
        "id": "df0947756db2569e",
        "type": "function",
        "z": "83429a095b8e7310",
        "name": "function",
        "func": "\nvar status = flow.get(\"influx-status\")\nif (status.fill == 'green') {\n\nconst str =msg.filename\nconst afterLastSlash = str.slice(str.lastIndexOf('/') + 1);\n//console.log(afterLastSlash); \n\nmsg.payload = afterLastSlash\nreturn msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1080,
        "y": 380,
        "wires": [
            [
                "ebc5924e0de59c64"
            ]
        ]
    },
    {
        "id": "cc3adc35afc02e04",
        "type": "status",
        "z": "83429a095b8e7310",
        "name": "",
        "scope": [
            "fadeb193fb941700"
        ],
        "x": 660,
        "y": 260,
        "wires": [
            [
                "84b7910786eec554"
            ]
        ]
    },
    {
        "id": "84b7910786eec554",
        "type": "change",
        "z": "83429a095b8e7310",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "influx-status",
                "pt": "flow",
                "to": "status",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 840,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "1f6c02d6736e3c84",
        "type": "catch",
        "z": "83429a095b8e7310",
        "name": "",
        "scope": [
            "fadeb193fb941700"
        ],
        "uncaught": false,
        "x": 990,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "019060dc93cd98d4",
        "type": "function",
        "z": "83429a095b8e7310",
        "name": "influx data",
        "func": "\nfor (var i = 0; i < msg.payload.length; i++) {\n\n    if ((msg.payload[i].value != \"NaN\") && (msg.payload[i].value != \"nan\") && (msg.payload[i].value != \"inf\") && (msg.payload[i].value != \"-inf\")) {\n        var time = new Date(msg.payload[i].Time*1000).getTime() \n    var obj = {};\n    obj.payload =\n\n        [\n            {\n                measurement: \"v\",\n\n                fields: {\n\n                    value: msg.payload[i].value,\n                    qu: msg.payload[i].qu,\n                    text: msg.payload[i].text\n                },\n                tags: {\n\n                    b: msg.payload[i].b,\n                    bd: msg.payload[i].bd,\n                    d: msg.payload[i].d,\n                    dd: msg.payload[i].dd,\n                    dt: msg.payload[i].dt,\n                    f: msg.payload[i].f,\n                    fd: msg.payload[i].fd,\n                    h: msg.payload[i].h,\n                    iid: msg.payload[i].iid,\n                    m: msg.payload[i].m,\n                    p: msg.payload[i].p,\n                    u: msg.payload[i].u\n\n                },\n\n                timestamp:time,\n            }\n        ];\n\n    //plantObj.push(obj)\n    node.send(obj);\n}\n}\n return null",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 560,
        "wires": [
            [
                "5fa3120ececf8fff",
                "9551ceb7a496fac6"
            ]
        ]
    },
    {
        "id": "6567d90936bffd8b",
        "type": "amqp-in",
        "z": "83429a095b8e7310",
        "name": "",
        "broker": "e51f9084c202c559",
        "prefetch": 0,
        "noAck": true,
        "exchangeName": "",
        "exchangeType": "topic",
        "exchangeRoutingKey": "scaback",
        "exchangeDurable": true,
        "queueName": "scaback",
        "queueExclusive": false,
        "queueDurable": true,
        "queueAutoDelete": false,
        "headers": "{}",
        "x": 180,
        "y": 560,
        "wires": [
            [
                "019060dc93cd98d4",
                "1fe9a0931f2da2f0"
            ]
        ]
    },
    {
        "id": "b1d2064fa2d108e3",
        "type": "debug",
        "z": "83429a095b8e7310",
        "name": "debug 88",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1480,
        "y": 260,
        "wires": []
    },
    {
        "id": "04160379033088c3",
        "type": "comment",
        "z": "83429a095b8e7310",
        "name": "influxdb status checking and flow setting",
        "info": "",
        "x": 270,
        "y": 220,
        "wires": []
    },
    {
        "id": "bafb50ab17b679af",
        "type": "comment",
        "z": "83429a095b8e7310",
        "name": "mqtt subscribe to influxdb",
        "info": "",
        "x": 230,
        "y": 520,
        "wires": []
    },
    {
        "id": "ee8157918b57090e",
        "type": "comment",
        "z": "83429a095b8e7310",
        "name": "delete flow creation and deletion",
        "info": "",
        "x": 1150,
        "y": 220,
        "wires": []
    },
    {
        "id": "1f469328eaa0689a",
        "type": "comment",
        "z": "83429a095b8e7310",
        "name": "file deletion after mqtt publish",
        "info": "",
        "x": 1140,
        "y": 340,
        "wires": []
    },
    {
        "id": "6ea236565a250898",
        "type": "debug",
        "z": "83429a095b8e7310",
        "name": "debug 89",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1400,
        "y": 460,
        "wires": []
    },
    {
        "id": "cbc45541d06386f5",
        "type": "mqtt out",
        "z": "83429a095b8e7310",
        "name": "",
        "topic": "scaback",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "c9887aea6b7f447e",
        "x": 1400,
        "y": 420,
        "wires": []
    },
    {
        "id": "9551ceb7a496fac6",
        "type": "debug",
        "z": "83429a095b8e7310",
        "name": "debug 831",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 510,
        "y": 600,
        "wires": []
    },
    {
        "id": "0be0a1cfe247985c",
        "type": "debug",
        "z": "83429a095b8e7310",
        "name": "debug 867",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1230,
        "y": 460,
        "wires": []
    },
    {
        "id": "2be109f240bd3581",
        "type": "catch",
        "z": "83429a095b8e7310",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 760,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "1fe9a0931f2da2f0",
        "type": "debug",
        "z": "83429a095b8e7310",
        "name": "debug 1676",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 390,
        "y": 660,
        "wires": []
    },
    {
        "id": "5fa3120ececf8fff",
        "type": "influxdb batch",
        "z": "83429a095b8e7310",
        "influxdb": "e21bf551feb49ad7",
        "precision": "",
        "retentionPolicy": "",
        "name": "influx",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "iplon",
        "bucket": "iSolar",
        "x": 490,
        "y": 560,
        "wires": []
    },
    {
        "id": "1938168b14448863",
        "type": "mqtt in",
        "z": "7d395c56b48222aa",
        "name": "",
        "topic": "INC_INV",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "5bb2b893dbcabe41",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 120,
        "y": 360,
        "wires": [
            [
                "8ad2a2cff7417eab",
                "3a5c0b05f11284bd",
                "f19ea0d2bbda341a",
                "bfee215e37ca78fb"
            ]
        ]
    },
    {
        "id": "3a5c0b05f11284bd",
        "type": "function",
        "z": "7d395c56b48222aa",
        "name": "influxdb",
        "func": "\nvar time = new Date().getTime()\nvar array = []\narray.length = 0\nvar obj1 = {}\nfor (var i = 0; i < msg.payload.length; i++) {    \n    var val1 = msg.payload[i].value\n    if(!isNaN(val1))\n    {   \n        var cal_val = parseFloat(val1)\n\n         var obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": val1\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        \"timestamp\": time,\n    }\n \n        array.push(obj)\n    }\n}\nif(array.length != 0)\n{\n    msg.payload = array\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 400,
        "wires": [
            [
                "02c36b27d73bdbba",
                "4c4ca6f73a038d18"
            ]
        ]
    },
    {
        "id": "9bc21dd4d36eb551",
        "type": "modbus-flex-server",
        "z": "7d395c56b48222aa",
        "name": "INC01_Virtual_Server",
        "logEnabled": true,
        "serverAddress": "192.168.90.171",
        "serverPort": "502",
        "responseDelay": 100,
        "unitId": 1,
        "delayUnit": "ms",
        "coilsBufferSize": 20000,
        "registersBufferSize": 20000,
        "minAddress": 0,
        "splitAddress": 10000,
        "funcGetCoil": "function getFlexCoil(addr, unitID) {\n\tif (unitID === node.unitId && \n\t\taddr >= node.minAddress && \n\t\taddr <= node.splitAddress) { \n\n\t\treturn node.coils.readUInt8(addr * node.bufferFactor) \n\t}  \n}",
        "funcGetDiscreteInput": "function getFlexDiscreteInput(addr, unitID) {\n\taddr += node.splitAddress\n\tif (unitID === node.unitId && \n\t\taddr >= node.splitAddress && \n\t\taddr <= node.splitAddress * 2) { \n\n\t\treturn node.coils.readUInt8(addr * node.bufferFactor) \n\t}  \n}",
        "funcGetInputRegister": "function getFlexInputRegister(addr, unitID) { \n\tif (unitID === node.unitId && \n\t\taddr >= node.minAddress && \n\t\taddr <= node.splitAddress) { \n\n\t\treturn node.registers.readUInt16BE(addr * node.bufferFactor)  \n\t} \n}",
        "funcGetHoldingRegister": "function getFlexHoldingRegsiter(addr, unitID) { \n\taddr += node.splitAddress\n\tif (unitID === node.unitId && \n\t\taddr >= node.splitAddress && \n\t\taddr <= node.splitAddress * 2) { \n\n\t\treturn node.registers.readUInt16BE(addr * node.bufferFactor)  \n\t} \n}",
        "funcSetCoil": "function setFlexCoil(addr, value, unitID) { \n\tif (unitID === node.unitId && \n\t\taddr >= node.minAddress && \n\t\taddr <= node.splitAddress) { \n\n\t\tnode.coils.writeUInt8(value, addr * node.bufferFactor)  \n\t} \n}",
        "funcSetRegister": "function setFlexRegister(addr, value, unitID) { \n\taddr += node.splitAddress\n\tif (unitID === node.unitId && \n\t\taddr >= node.splitAddress && \n\t\taddr <= node.splitAddress * 2) { \n\n\t\tnode.registers.writeUInt16BE(value, addr * node.bufferFactor)  \n\t} \n}",
        "showErrors": true,
        "x": 1000,
        "y": 80,
        "wires": [
            [],
            [],
            [],
            [],
            []
        ]
    },
    {
        "id": "b68201c1239725fe",
        "type": "modbus-flex-write",
        "z": "7d395c56b48222aa",
        "name": "INC01_VR_WR",
        "showStatusActivities": true,
        "showErrors": true,
        "showWarnings": true,
        "server": "46ffdba9d0086f9d",
        "emptyMsgOnFail": true,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 1040,
        "y": 360,
        "wires": [
            [
                "2a812f931c296819"
            ],
            []
        ]
    },
    {
        "id": "8ad2a2cff7417eab",
        "type": "debug",
        "z": "7d395c56b48222aa",
        "name": "debug 81",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 280,
        "y": 440,
        "wires": []
    },
    {
        "id": "69ee4cc962cfd6a2",
        "type": "function",
        "z": "7d395c56b48222aa",
        "name": "modtcp_write",
        "func": "for (var i = 0; i < msg.payload.tag.length; i++) {\n     var obj = {}\n     for (var j = 0; j < msg.payload.value.length; j++) {\n          if (msg.payload.tag[i].SNo == msg.payload.value[j].SNo){\n               if (msg.payload.tag[i].data_type == \"U16\") {\n                    obj.payload = { \"value\": msg.payload.value[j].value, 'fc': msg.payload.tag[i].fc, 'unitid': 1, 'address': msg.payload.tag[i].reg_id, 'quantity': msg.payload.tag[i].qty };\n                    node.send(obj);\n               }\n               else if (msg.payload.tag[i].data_type == \"S16\") {\n                    const signedInteger = msg.payload.value[j].value;\n                    const decimalValue = (signedInteger < 0) ? (0xFFFF + signedInteger + 1) : signedInteger;\n                    obj.payload = { \"value\": decimalValue, 'fc': msg.payload.tag[i].fc, 'unitid': 1, 'address': msg.payload.tag[i].reg_id, 'quantity': msg.payload.tag[i].qty };\n                    node.send(obj);\n               }\n               else if (msg.payload.tag[i].data_type == \"U32\") {\n                    var buf = Buffer.alloc(4);\n                    buf.writeUInt32BE(msg.payload.value[j].value);\n                    var values = [(buf[0] * 256 + buf[1]), (buf[2] * 256) + buf[3]]\n                    obj.payload = { \"value\": values, 'fc': msg.payload.tag[i].fc, 'unitid': 1, 'address': msg.payload.tag[i].reg_id, 'quantity': msg.payload.tag[i].qty };\n                    node.send(obj);\n               }\n               else if (msg.payload.tag[i].data_type == \"S32\") {\n                    var buf = Buffer.alloc(4);\n                    buf.writeInt32BE(msg.payload.value[j].value);\n                    var values = [(buf[0] * 256 + buf[1]), (buf[2] * 256) + buf[3]]\n                    obj.payload = { \"value\": values, 'fc': msg.payload.tag[i].fc, 'unitid': 1, 'address': msg.payload.tag[i].reg_id, 'quantity': msg.payload.tag[i].qty };\n                    node.send(obj);\n               }\n          }\n     }\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 360,
        "wires": [
            [
                "b68201c1239725fe",
                "800f377e65edf7c0"
            ]
        ]
    },
    {
        "id": "5b68f42dbc045cce",
        "type": "inject",
        "z": "7d395c56b48222aa",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "0.5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 620,
        "wires": [
            [
                "b333f66ee1e9d6ed",
                "26304f5986ae90c0"
            ]
        ]
    },
    {
        "id": "af2ba07b997b8215",
        "type": "csv",
        "z": "7d395c56b48222aa",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 410,
        "y": 620,
        "wires": [
            [
                "b901eecf23dc0d48",
                "23f559ffc03d5b50"
            ]
        ]
    },
    {
        "id": "23f559ffc03d5b50",
        "type": "function",
        "z": "7d395c56b48222aa",
        "name": "query",
        "func": "for (var i = 0; i < msg.payload.length; i++)\n{\n\n    if (msg.payload[i].read_reg_type == \"S32\" || msg.payload[i].read_reg_type == \"U32\")\n    {\n        var query1 = {}\n        query1.payload = { 'fc': 3, 'unitid': 1, 'address': msg.payload[i].read_reg_id, 'quantity': msg.payload[i].addr_qty};\n        node.send(query1);\n    }\n\n    else if (msg.payload[i].read_reg_type == \"S16\" || msg.payload[i].read_reg_type == \"U16\")\n    {\n        var query2 = {}\n        query2.payload = { 'fc':3, 'unitid':1, 'address': msg.payload[i].read_reg_id, 'quantity': msg.payload[i].addr_qty};\n        node.send(query2);\n    }\n\n}\nreturn null;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 580,
        "wires": [
            [
                "d8ce3568259cdff0",
                "4be6bc715c5fb63a"
            ]
        ]
    },
    {
        "id": "d8ce3568259cdff0",
        "type": "modbus-flex-getter",
        "z": "7d395c56b48222aa",
        "name": "INC01_VR_RD",
        "showStatusActivities": true,
        "showErrors": true,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "46ffdba9d0086f9d",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": true,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 520,
        "y": 580,
        "wires": [
            [],
            [
                "2e68c9c476d6480d",
                "1f0cf6f0125a4869"
            ]
        ]
    },
    {
        "id": "b901eecf23dc0d48",
        "type": "function",
        "z": "7d395c56b48222aa",
        "name": "fields",
        "func": "var no_reg = msg.payload.length\nvar obj = {};\n\nfor (var i = 0; i < msg.payload.length; i++) {\n    obj.payload = {\n        read_reg_id: msg.payload[i].read_reg_id,\n        read_reg_type: msg.payload[i].read_reg_type,\n        write_reg_id: msg.payload[i].write_reg_id,\n        write_reg_type: msg.payload[i].write_reg_type,\n        b: msg.payload[i].b,\n        bd: msg.payload[i].bd,\n        d: msg.payload[i].d,\n        dd: msg.payload[i].dd,\n        dt: msg.payload[i].dt,\n        f: msg.payload[i].f,\n        fd: msg.payload[i].fd,\n        h: msg.payload[i].h,\n        iid: msg.payload[i].iid,\n        m: msg.payload[i].m,\n        p: msg.payload[i].p,\n        qu: msg.payload[i].qu,\n        text: msg.payload[i].text,\n        u: msg.payload[i].u\n    }\n    node.send(obj)\n}\n\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 620,
        "wires": [
            [
                "66a4991a9c03fce2"
            ]
        ]
    },
    {
        "id": "66a4991a9c03fce2",
        "type": "change",
        "z": "7d395c56b48222aa",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "fields",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 810,
        "y": 620,
        "wires": [
            [
                "9db6dc908d340483"
            ]
        ]
    },
    {
        "id": "9db6dc908d340483",
        "type": "join",
        "z": "7d395c56b48222aa",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "8",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 950,
        "y": 620,
        "wires": [
            [
                "8761d85876fcd616"
            ]
        ]
    },
    {
        "id": "8761d85876fcd616",
        "type": "function",
        "z": "7d395c56b48222aa",
        "name": "combine",
        "func": "context.data = context.data || {};\nswitch (msg.topic) {\n    case \"command\":\n        context.data.command = msg.payload;\n        msg = null;\n        break;\n    case \"fields\":\n        context.data.fields = msg.payload;\n        msg = null;\n        break;   \n}\nif (context.data.command != null && context.data.fields != null) {\n    var data_combine = {\n        \"command\": context.data.command,\n        \"fields\": context.data.fields,        \n\n    }\n    context.data = null\n    return { payload: data_combine };\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1100,
        "y": 600,
        "wires": [
            [
                "d84e47d3df8a31e8"
            ]
        ]
    },
    {
        "id": "9648e44bcf27767f",
        "type": "change",
        "z": "7d395c56b48222aa",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "command",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 810,
        "y": 580,
        "wires": [
            [
                "192cabf3904b05ad"
            ]
        ]
    },
    {
        "id": "192cabf3904b05ad",
        "type": "join",
        "z": "7d395c56b48222aa",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "8",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 950,
        "y": 580,
        "wires": [
            [
                "8761d85876fcd616",
                "9afe887463529f80"
            ]
        ]
    },
    {
        "id": "2e68c9c476d6480d",
        "type": "function",
        "z": "7d395c56b48222aa",
        "name": "msg",
        "func": "msg.payload = {\n    buf: msg.payload.buffer,\n    register: msg.modbusRequest.address,\n    unitid: msg.modbusRequest.unitid,\n    quantity: msg.modbusRequest.quantity,\n    fc: msg.modbusRequest.fc\n}\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 580,
        "wires": [
            [
                "9648e44bcf27767f"
            ]
        ]
    },
    {
        "id": "d84e47d3df8a31e8",
        "type": "function",
        "z": "7d395c56b48222aa",
        "name": "Data con",
        "func": "let array = []\nvar time = new Date().getTime()\nfor (var i = 0; i < msg.payload.command.length; i++) {\n    for (var j = 0; j < msg.payload.fields.length; j++) {\n        var obj = {}\n        if (msg.payload.command[i].register == msg.payload.fields[j].read_reg_id)\n        {\n            if (msg.payload.command[i].quantity == \"1\")\n            {\n                if (msg.payload.fields[j].read_reg_type == 'S16')\n                {\n                    const buf = Buffer.from(msg.payload.command[i].buf);\n                    const value = buf.readInt16BE();\n                    obj = {\n                        value: value,\n                        b: msg.payload.fields[j].b,\n                        bd: msg.payload.fields[j].bd,\n                        d: msg.payload.fields[j].d,\n                        dd: msg.payload.fields[j].dd,\n                        dt: msg.payload.fields[j].dt,\n                        f: msg.payload.fields[j].f,\n                        fd: msg.payload.fields[j].fd,\n                        h: msg.payload.fields[j].h,\n                        iid: msg.payload.fields[j].iid,\n                        m: msg.payload.fields[j].m,\n                        p: msg.payload.fields[j].p,\n                        qu: msg.payload.fields[j].qu,\n                        text: msg.payload.fields[j].text,\n                        u: msg.payload.fields[j].u,\n                        mf: msg.payload.fields[j].mf,\n                        write_reg_id: msg.payload.fields[j].write_reg_id,\n                        write_reg_type: msg.payload.fields[j].write_reg_type,\n                        reg_id: msg.payload.command[i].register,\n                        unitid: msg.payload.command[i].unitid,\n                        qty: msg.payload.command[i].quantity,\n                        fc: msg.payload.command[i].fc,                        \n                        time: time\n                    }\n                    array.push(obj)\n                    \n                }\n                else if (msg.payload.fields[i].read_reg_type == 'U16')\n                {\n                    const buf = Buffer.from(msg.payload.command[i].buf);\n                    const value = buf.readUInt16BE();\n                    obj = {\n                        value: value,\n                        b: msg.payload.fields[j].b,\n                        bd: msg.payload.fields[j].bd,\n                        d: msg.payload.fields[j].d,\n                        dd: msg.payload.fields[j].dd,\n                        dt: msg.payload.fields[j].dt,\n                        f: msg.payload.fields[j].f,\n                        fd: msg.payload.fields[j].fd,\n                        h: msg.payload.fields[j].h,\n                        iid: msg.payload.fields[j].iid,\n                        m: msg.payload.fields[j].m,\n                        p: msg.payload.fields[j].p,\n                        qu: msg.payload.fields[j].qu,\n                        text: msg.payload.fields[j].text,\n                        u: msg.payload.fields[j].u,\n                        mf: msg.payload.fields[j].mf,\n                        write_reg_id: msg.payload.fields[j].write_reg_id,\n                        write_reg_type: msg.payload.fields[j].write_reg_type,\n                        reg_id: msg.payload.command[i].register,\n                        unitid: msg.payload.command[i].unitid,\n                        qty: msg.payload.command[i].quantity,\n                        fc: msg.payload.command[i].fc,\n                        time: time\n                    }\n                    array.push(obj)\n                }\n            }\n            else if (msg.payload.command[i].quantity == \"2\") {\n                if (msg.payload.fields[j].read_reg_type == 'S32') {\n                    const buf = Buffer.from(msg.payload.command[i].buf);\n                    const value = buf.readInt32BE();\n                    obj = {\n                        value: value,\n                        b: msg.payload.fields[j].b,\n                        bd: msg.payload.fields[j].bd,\n                        d: msg.payload.fields[j].d,\n                        dd: msg.payload.fields[j].dd,\n                        dt: msg.payload.fields[j].dt,\n                        f: msg.payload.fields[j].f,\n                        fd: msg.payload.fields[j].fd,\n                        h: msg.payload.fields[j].h,\n                        iid: msg.payload.fields[j].iid,\n                        m: msg.payload.fields[j].m,\n                        p: msg.payload.fields[j].p,\n                        qu: msg.payload.fields[j].qu,\n                        text: msg.payload.fields[j].text,\n                        u: msg.payload.fields[j].u,\n                        mf: msg.payload.fields[j].mf,\n                        write_reg_id: msg.payload.fields[j].write_reg_id,\n                        write_reg_type: msg.payload.fields[j].write_reg_type,\n                        reg_id: msg.payload.command[i].register,\n                        unitid: msg.payload.command[i].unitid,\n                        qty: msg.payload.command[i].quantity,\n                        fc: msg.payload.command[i].fc,                        \n                        time: time\n                    }\n                    array.push(obj)\n                }\n                else if (msg.payload.fields[j].read_reg_type == 'U32') {\n                    const buf = Buffer.from(msg.payload.command[i].buf);\n                    const value = buf.readUInt32BE();\n                    obj = {\n                        value: value,\n                        b: msg.payload.fields[j].b,\n                        bd: msg.payload.fields[j].bd,\n                        d: msg.payload.fields[j].d,\n                        dd: msg.payload.fields[j].dd,\n                        dt: msg.payload.fields[j].dt,\n                        f: msg.payload.fields[j].f,\n                        fd: msg.payload.fields[j].fd,\n                        h: msg.payload.fields[j].h,\n                        iid: msg.payload.fields[j].iid,\n                        m: msg.payload.fields[j].m,\n                        p: msg.payload.fields[j].p,\n                        qu: msg.payload.fields[j].qu,\n                        text: msg.payload.fields[j].text,\n                        u: msg.payload.fields[j].u,\n                        mf: msg.payload.fields[j].mf,\n                        write_reg_id: msg.payload.fields[j].write_reg_id,\n                        write_reg_type: msg.payload.fields[j].write_reg_type,\n                        reg_id: msg.payload.command[i].register,\n                        unitid: msg.payload.command[i].unitid,\n                        qty: msg.payload.command[i].quantity,\n                        fc: msg.payload.command[i].fc,                      \n                        time: time\n                    }\n                    array.push(obj)\n                }\n                else if (msg.payload.fields[j].read_reg_type == 'F32')\n                {\n                    const buf = Buffer.from(msg.payload.command[i].buf);\n                    const value = buf.readFloatBE();\n                    obj = {\n                        value: value,\n                        b: msg.payload.fields[j].b,\n                        bd: msg.payload.fields[j].bd,\n                        d: msg.payload.fields[j].d,\n                        dd: msg.payload.fields[j].dd,\n                        dt: msg.payload.fields[j].dt,\n                        f: msg.payload.fields[j].f,\n                        fd: msg.payload.fields[j].fd,\n                        h: msg.payload.fields[j].h,\n                        iid: msg.payload.fields[j].iid,\n                        m: msg.payload.fields[j].m,\n                        p: msg.payload.fields[j].p,\n                        qu: msg.payload.fields[j].qu,\n                        text: msg.payload.fields[j].text,\n                        u: msg.payload.fields[j].u,\n                        mf: msg.payload.fields[j].mf,\n                        write_reg_id: msg.payload.fields[j].write_reg_id,\n                        write_reg_type: msg.payload.fields[j].write_reg_type,\n                        reg_id: msg.payload.command[i].register,\n                        unitid: msg.payload.command[i].unitid,\n                        qty: msg.payload.command[i].quantity,\n                        fc: msg.payload.command[i].fc,                        \n                        time: time\n                    }\n                    array.push(obj)\n                }                \n               \n            }\n        }        \n    }\n}\nmsg.payload = array\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1260,
        "y": 600,
        "wires": [
            [
                "4fd396096649e6d4",
                "fcb61af11180e66e"
            ]
        ]
    },
    {
        "id": "4fd396096649e6d4",
        "type": "function",
        "z": "7d395c56b48222aa",
        "name": "influxdb",
        "func": "var time = new Date().getTime()\nvar array = []\n\nfor (var i = 0; i < msg.payload.length; i++) {\n    \n    var  val1 = msg.payload[i].value    \n\n    var cal_val = parseFloat(val1)\n    var obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": cal_val\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        \"timestamp\": time,\n    }\n \n    array.push(obj)\n}\nmsg.payload = array\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1420,
        "y": 600,
        "wires": [
            [
                "3dafa185f4ce1c18"
            ]
        ]
    },
    {
        "id": "3dafa185f4ce1c18",
        "type": "debug",
        "z": "7d395c56b48222aa",
        "name": "debug 1552",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1610,
        "y": 600,
        "wires": []
    },
    {
        "id": "8ed21add15f466f8",
        "type": "comment",
        "z": "7d395c56b48222aa",
        "name": "Reading from mqtt_ppc running in Inv_Eng",
        "info": "",
        "x": 220,
        "y": 280,
        "wires": []
    },
    {
        "id": "b333f66ee1e9d6ed",
        "type": "file in",
        "z": "7d395c56b48222aa",
        "name": "conf.csv",
        "filename": "/mnt/docker_common/node-red/config.csv",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 300,
        "y": 680,
        "wires": [
            [
                "d52bf7bc51d35b4b",
                "16c6967c0dd4650f"
            ]
        ]
    },
    {
        "id": "d52bf7bc51d35b4b",
        "type": "csv",
        "z": "7d395c56b48222aa",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 670,
        "y": 680,
        "wires": [
            [
                "a9a9fe4ddadae21a",
                "8f59a4d5ed859e19"
            ]
        ]
    },
    {
        "id": "a9a9fe4ddadae21a",
        "type": "change",
        "z": "7d395c56b48222aa",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "reference",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1110,
        "y": 680,
        "wires": [
            [
                "01204107edef4469"
            ]
        ]
    },
    {
        "id": "ff4ac7ad1df7ce77",
        "type": "function",
        "z": "7d395c56b48222aa",
        "name": "field write",
        "func": "var SEL_PC_RX = msg.payload.reference[0].value\nvar PAC_ON_OFF_1 = msg.payload.reference[1].value\nvar QAC_ON_OFF_1 = msg.payload.reference[2].value\nvar UAC_ON_OFF_1 = msg.payload.reference[3].value\nvar FAC_ON_OFF_1 = msg.payload.reference[4].value\nvar PF_ON_OFF_1 = msg.payload.reference[5].value\nvar RAMP_ON_OFF_1 = msg.payload.reference[6].value\n\n\n\nfor (var i = 0; i < msg.payload.command.length; i++) {\n    var block = msg.payload.command[i].b\n    var device = msg.payload.command[i].d\n\n\n    if (msg.payload.command[i].reg_id == \"3010\")\n    {\n        var old_pac_limit = msg.payload.command[i].value\n    }\n    else if (msg.payload.command[i].reg_id == \"4000\") {\n        var new_pac_limit = msg.payload.command[i].value\n        var new_pac_limit_field = msg.payload.command[i].f\n      \n    }\n    else if (msg.payload.command[i].reg_id == \"3012\") {\n        var old_qac_limit = msg.payload.command[i].value\n    }\n    else if (msg.payload.command[i].reg_id == \"4002\") {\n        var new_qac_limit = msg.payload.command[i].value\n        var new_qac_limit_field = msg.payload.command[i].f\n       \n    }\n    else if (msg.payload.command[i].reg_id == \"3014\") {\n        var old_pf_limit = msg.payload.command[i].value\n    }\n    else if (msg.payload.command[i].reg_id == \"4004\") {\n        var new_pf_limit = msg.payload.command[i].value\n        var new_pf_limit_field = msg.payload.command[i].f\n     \n    }\n    else if (msg.payload.command[i].reg_id == \"3016\") {\n        var old_qac_ref_sel = msg.payload.command[i].value\n    }\n    else if (msg.payload.command[i].reg_id == \"4006\") {\n        var new_qac_ref_sel = msg.payload.command[i].value\n        var new_qac_ref_sel_field = msg.payload.command[i].f\n       \n    }\n}\n\n\nif (SEL_PC_RX == 0) {\n    if (old_pac_limit != new_pac_limit && new_pac_limit != 0) {\n        var msg1 = {};\n        msg1.payload = { \n            'value': new_pac_limit,            \n            'b': block,\n            'd': device,\n            'f': new_pac_limit_field\n            };\n        node.send(msg1);\n    }\n\n    if (old_qac_ref_sel != new_qac_ref_sel && new_qac_ref_sel != 0) {\n        var msg6 = {};\n        msg6.payload = { \n            \"value\": new_qac_ref_sel,\n            'b': block,\n            'd': device,\n            'f': new_qac_ref_sel_field\n             };\n        node.send(msg6);\n\n    }\n    if (new_qac_ref_sel == 162 && old_qac_ref_sel == new_qac_ref_sel) {\n    if (old_qac_limit != new_qac_limit) {\n       // const decimalValue = (new_qac_limit < 0) ? (0xFFFF + new_qac_limit + 1) : new_qac_limit;\n        var msg2 = {};\n        msg2.payload = { \n            \"value\": new_qac_limit,                \n            'b': block,\n            'd': device,\n            'f': new_qac_limit_field\n            };\n        node.send(msg2);\n    }\n    }\n    if (new_qac_ref_sel == 161 && old_qac_ref_sel == new_qac_ref_sel) {   \n    if (old_pf_limit != new_pf_limit && new_pf_limit != 0) {\n       // const decimalValue = (new_pf_limit < 0) ? (0xFFFF + new_pf_limit + 1) : new_pf_limit;\n        var msg3 = {};\n        msg3.payload = { \n            \"value\": new_pf_limit,                 \n            'b': block,\n            'd': device,\n            'f': new_pf_limit_field\n            };\n        node.send(msg3);\n    }\n    }\n}\nelse if (SEL_PC_RX == 1) {\n    if (PAC_ON_OFF_1 == 1 || FAC_ON_OFF_1 == 1 || RAMP_ON_OFF_1 == 1) {\n        if (old_pac_limit != new_pac_limit && new_pac_limit != 0) {\n            var msg4 = {};\n            msg4.payload = { \n                \"value\": new_pac_limit,                \n                'b': block,\n                'd': device,\n                'f': new_pac_limit_field\n                };\n            node.send(msg4);\n        }\n    }\n    if (new_qac_ref_sel == 161) {\n        if (old_pf_limit != new_pf_limit && new_pf_limit != 0) {\n            // const decimalValue = (new_pf_limit < 0) ? (0xFFFF + new_pf_limit + 1) : new_pf_limit;\n            var msg9 = {};\n            msg9.payload = {\n                \"value\": new_pf_limit,\n                'b': block,\n                'd': device,\n                'f': new_pf_limit_field\n            };\n            node.send(msg9);\n        }\n    }\n    if (old_qac_limit != new_qac_limit) {\n        //const decimalValue = (new_qac_limit < 0) ? (0xFFFF + new_qac_limit + 1) : new_qac_limit;\n        var msg5 = {};\n        msg5.payload = { \n            \"value\": new_qac_limit,             \n            'b': block,\n            'd': device,\n            'f': new_qac_limit_field\n            };\n        node.send(msg5);\n    }\n}\n//msg.payload = { new: new_pac_limit, old: old_pac_limit, qac: old_qac_ref_sel, new_qac: new_qac_ref_sel}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1440,
        "y": 660,
        "wires": [
            [
                "b0101371a3f380b8",
                "62109fe60f0df0d6"
            ]
        ]
    },
    {
        "id": "62109fe60f0df0d6",
        "type": "mqtt out",
        "z": "7d395c56b48222aa",
        "name": "",
        "topic": "INC_INV_Write",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "1a3bde724353a574",
        "x": 1620,
        "y": 660,
        "wires": []
    },
    {
        "id": "fcb61af11180e66e",
        "type": "change",
        "z": "7d395c56b48222aa",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "command",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1110,
        "y": 640,
        "wires": [
            [
                "01204107edef4469"
            ]
        ]
    },
    {
        "id": "01204107edef4469",
        "type": "function",
        "z": "7d395c56b48222aa",
        "name": "combine",
        "func": "context.data = context.data || {};\nswitch (msg.topic) {\n    case \"command\":\n        context.data.command = msg.payload;\n        msg = null;\n        break;    \n    case \"reference\":\n        context.data.reference = msg.payload;\n        msg = null;\n        break;\n}\nif (context.data.command != null && context.data.reference != null) {\n    var data_combine = {\n        \"command\": context.data.command,       \n        \"reference\": context.data.reference\n\n    }\n    context.data = null\n    return { payload: data_combine };\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1260,
        "y": 660,
        "wires": [
            [
                "507b90f710774d0b",
                "ff4ac7ad1df7ce77"
            ]
        ]
    },
    {
        "id": "b0101371a3f380b8",
        "type": "debug",
        "z": "7d395c56b48222aa",
        "name": "debug 3",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1540,
        "y": 720,
        "wires": []
    },
    {
        "id": "26304f5986ae90c0",
        "type": "template",
        "z": "7d395c56b48222aa",
        "name": "sdf",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,write_reg_id,write_reg_type,fun_code,unit_id,addr_qty,read_reg_id,read_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u\n1,,,,,2,3010,U32,B01,B01_INV,INV,INV,INV,PAC_LIMIT,PAC_LIMIT,Server8583,8583,1,Sembcorp,,,\n2,15013,U32,16,1,2,4000,U32,B01,B01_INV,INV,INV,INV,PAC_LIMIT_CMD,PAC_LIMIT_CMD,Server8583,8583,1,Sembcorp,0,new,kW\n3,,,,,2,3012,S32,B01,B01_INV,INV,INV,INV,QAC_LIMIT,QAC_LIMIT,Server8583,8583,1,Sembcorp,,,\n4,15011,S32,16,1,2,4002,S32,B01,B01_INV,INV,INV,INV,QAC_LIMIT_CMD,QAC_LIMIT_CMD,Server8583,8583,1,Sembcorp,,,KVAr\n5,,,,,2,3014,S32,B01,B01_INV,INV,INV,INV,PF_LIMIT,PF_LIMIT,Server8583,8583,1,Sembcorp,,,\n6,15012,S32,16,1,2,4004,S32,B01,B01_INV,INV,INV,INV,PF_LIMIT_CMD,PF_LIMIT_CMD,Server8583,8583,1,Sembcorp,,,\n7,,,,,1,3016,U16,B01,B01_INV,INV,INV,INV,QAC_REF_SEL,QAC_REF_SEL,Server8583,8583,1,Sembcorp,,,\n8,15010,U16,6,1,1,4006,U16,B01,B01_INV,INV,INV,INV,QAC_REF_SEL,QAC_REF_SEL,Server8583,8583,1,Sembcorp,,,\n",
        "output": "str",
        "x": 290,
        "y": 620,
        "wires": [
            [
                "af2ba07b997b8215"
            ]
        ]
    },
    {
        "id": "1f0cf6f0125a4869",
        "type": "debug",
        "z": "7d395c56b48222aa",
        "name": "debug 1602",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 690,
        "y": 540,
        "wires": []
    },
    {
        "id": "f19ea0d2bbda341a",
        "type": "template",
        "z": "7d395c56b48222aa",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "SNo,vr_wr_reg,data_type,qty,fc,b,d,f\n1,3000,U32,2,16,B01,INV,PAC\n2,3002,S32,2,16,B01,INV,QAC\n3,3004,S32,2,16,B01,INV,PF\n4,3010,U32,2,16,B01,INV,OLD_PAC_LIMIT\n5,3012,S32,2,16,B01,INV,OLD_QAC_LIMIT\n6,3014,S32,2,16,B01,INV,OLD_PF_LIMIT\n7,3018,U16,1,6,B01,INV,NO_OF_INV\n",
        "output": "str",
        "x": 200,
        "y": 320,
        "wires": [
            [
                "77d231ffc997fc4a"
            ]
        ]
    },
    {
        "id": "d2e357c82f35b4c0",
        "type": "function",
        "z": "7d395c56b48222aa",
        "name": "combine",
        "func": "context.data = context.data || {};\nswitch (msg.topic) {\n    case \"tag\":\n        context.data.tag = msg.payload;\n        msg = null;\n        break;\n    case \"value\":\n        context.data.value = msg.payload;\n        msg = null;\n        break;\n}\nif (context.data.tag != null && context.data.value != null) {\n    var data_combine = {\n        \"tag\": context.data.tag,\n        \"value\": context.data.value,\n\n    }\n    context.data = null\n    return { payload: data_combine };\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 360,
        "wires": [
            [
                "69ee4cc962cfd6a2",
                "0da6f642564a3896"
            ]
        ]
    },
    {
        "id": "146f363720f809cb",
        "type": "change",
        "z": "7d395c56b48222aa",
        "name": "tag",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "tag",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 570,
        "y": 320,
        "wires": [
            [
                "3163aceefc93515a"
            ]
        ]
    },
    {
        "id": "3163aceefc93515a",
        "type": "join",
        "z": "7d395c56b48222aa",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "7",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 690,
        "y": 320,
        "wires": [
            [
                "d2e357c82f35b4c0"
            ]
        ]
    },
    {
        "id": "bfee215e37ca78fb",
        "type": "change",
        "z": "7d395c56b48222aa",
        "name": "value",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "value",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 450,
        "y": 360,
        "wires": [
            [
                "d2e357c82f35b4c0",
                "d6adb58944ce162e"
            ]
        ]
    },
    {
        "id": "fe7f030e7b19790d",
        "type": "function",
        "z": "7d395c56b48222aa",
        "name": "msg",
        "func": "for (var i = 0; i < msg.payload.length; i++){\n    var obj = {}\n    obj.payload = {\n        SNo : msg.payload[i].SNo,\n        reg_id : msg.payload[i].vr_wr_reg,\n        data_type : msg.payload[i].data_type,\n        qty : msg.payload[i].qty,\n        fc : msg.payload[i].fc,\n    }\n    node.send(obj)\n}\nreturn null",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 320,
        "wires": [
            [
                "146f363720f809cb"
            ]
        ]
    },
    {
        "id": "77d231ffc997fc4a",
        "type": "csv",
        "z": "7d395c56b48222aa",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 330,
        "y": 320,
        "wires": [
            [
                "fe7f030e7b19790d"
            ]
        ]
    },
    {
        "id": "f84062ba4930e864",
        "type": "catch",
        "z": "7d395c56b48222aa",
        "name": "",
        "scope": [
            "9bc21dd4d36eb551",
            "b68201c1239725fe",
            "d8ce3568259cdff0"
        ],
        "uncaught": false,
        "x": 110,
        "y": 160,
        "wires": [
            [
                "cfa30140fec2785b",
                "1da734da310770d3"
            ]
        ]
    },
    {
        "id": "800f377e65edf7c0",
        "type": "debug",
        "z": "7d395c56b48222aa",
        "name": "debug 1608",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1030,
        "y": 320,
        "wires": []
    },
    {
        "id": "02c36b27d73bdbba",
        "type": "debug",
        "z": "7d395c56b48222aa",
        "name": "debug 79",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 460,
        "y": 440,
        "wires": []
    },
    {
        "id": "2a812f931c296819",
        "type": "debug",
        "z": "7d395c56b48222aa",
        "name": "debug 1658",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1230,
        "y": 360,
        "wires": []
    },
    {
        "id": "0da6f642564a3896",
        "type": "debug",
        "z": "7d395c56b48222aa",
        "name": "debug 1660",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 810,
        "y": 260,
        "wires": []
    },
    {
        "id": "507b90f710774d0b",
        "type": "debug",
        "z": "7d395c56b48222aa",
        "name": "debug 1676",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1470,
        "y": 760,
        "wires": []
    },
    {
        "id": "8f59a4d5ed859e19",
        "type": "debug",
        "z": "7d395c56b48222aa",
        "name": "debug 1677",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 890,
        "y": 720,
        "wires": []
    },
    {
        "id": "16c6967c0dd4650f",
        "type": "debug",
        "z": "7d395c56b48222aa",
        "name": "debug 1678",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 490,
        "y": 720,
        "wires": []
    },
    {
        "id": "c55260bac8d62c2d",
        "type": "status",
        "z": "7d395c56b48222aa",
        "name": "",
        "scope": [
            "9bc21dd4d36eb551"
        ],
        "x": 120,
        "y": 200,
        "wires": [
            [
                "dc4932870397de95"
            ]
        ]
    },
    {
        "id": "dc4932870397de95",
        "type": "debug",
        "z": "7d395c56b48222aa",
        "name": "debug 1679",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 270,
        "y": 200,
        "wires": []
    },
    {
        "id": "cfa30140fec2785b",
        "type": "function",
        "z": "7d395c56b48222aa",
        "name": "function 1",
        "func": "const error = msg.error.stack\n\nconst errorPattern = /PortNotOpenError: Port Not Open/;\n\nif (errorPattern.test(error))\n{\n  msg.topic = \"error\"\n} \nelse\n{\n  msg.topic = \"no error\"\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 160,
        "wires": [
            [
                "b26f40323bc38843"
            ]
        ]
    },
    {
        "id": "32152ff08350b904",
        "type": "function",
        "z": "7d395c56b48222aa",
        "name": "Request Token",
        "func": "msg.payload = {\n    \"client_id\": \"node-red-editor\",\n    \"grant_type\": \"password\",\n    \"scope\": \"*\",\n    \"username\": \"admin\",\n    \"password\": \"iplon@321\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 160,
        "wires": [
            [
                "6a7794cc77307cf4"
            ]
        ]
    },
    {
        "id": "6a7794cc77307cf4",
        "type": "http request",
        "z": "7d395c56b48222aa",
        "name": "Token",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://192.168.90.84:1880/auth/token",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 710,
        "y": 160,
        "wires": [
            [
                "8ae536e670953f10"
            ]
        ]
    },
    {
        "id": "8ae536e670953f10",
        "type": "function",
        "z": "7d395c56b48222aa",
        "name": "Confirm token",
        "func": "// get the status of the request\nvar status = msg.statusCode;\n//var token = {};\nvar token = '';\nmsg.headers ={};\n\n//let node = feedback;\n\nswitch(status){\n    case 200:\n        node.log(\"Secure restart\");\n        token = JSON.parse(msg.payload);\n        token = 'Bearer '+token.access_token;\n        msg.headers = {\n            \"Authorization\": token,\n            \"Node-RED-Deployment-Type\":\"reload\"\n        }\nmsg.payload =\"\";\n        break;\n    case 204:\n        node.log(\"Secure without restart\");\n        global.set('result','\tSuccess - with no further content');\n        break;\n    case 400:\n        node.warn(\"Bad request\");\n        break;\n    case 401:\n        node.warn(\"Not authorized\");\n        break;\n    case 403:\n        node.warn(\"Forbidden\");\n        break;\n    case 404:\n        node.log(\"Unsecure restart\");\n        msg.headers = {\n            \"Node-RED-Deployment-Type\":\"reload\"\n        }\n        break;\n    case 409:\n        node.warn(\"Version mismatch\");\n        break;\n    case 500:\n        node.error(\"Server Error\");\n        break;\n    default:\n        node.warn(\"Unknown Error\");\n       break;\n}\n\nmsg.payload = \"\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 160,
        "wires": [
            [
                "c60d1a5cc6374f09"
            ]
        ],
        "info": "Restart of Node-Red flows.\nWill check if the action needs security or not.\nNote: if the first 5 attemps return a statuscode 403 'forbidden'\nthen the server will break and only way to recover is then to\nrestart the service"
    },
    {
        "id": "c60d1a5cc6374f09",
        "type": "http request",
        "z": "7d395c56b48222aa",
        "name": "Restart",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://192.168.90.84:1880/flows",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1020,
        "y": 160,
        "wires": [
            [
                "ce53313cf5b5b1a6"
            ]
        ]
    },
    {
        "id": "ce53313cf5b5b1a6",
        "type": "debug",
        "z": "7d395c56b48222aa",
        "name": "debug 1685",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1190,
        "y": 160,
        "wires": []
    },
    {
        "id": "b26f40323bc38843",
        "type": "switch",
        "z": "7d395c56b48222aa",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "error",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "no error",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 410,
        "y": 160,
        "wires": [
            [
                "32152ff08350b904"
            ],
            []
        ]
    },
    {
        "id": "1da734da310770d3",
        "type": "debug",
        "z": "7d395c56b48222aa",
        "name": "debug 1694",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 270,
        "y": 100,
        "wires": []
    },
    {
        "id": "9afe887463529f80",
        "type": "debug",
        "z": "7d395c56b48222aa",
        "name": "debug 1698",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1110,
        "y": 560,
        "wires": []
    },
    {
        "id": "4c4ca6f73a038d18",
        "type": "influxdb batch",
        "z": "7d395c56b48222aa",
        "influxdb": "33f460a4c4855dbc",
        "precision": "",
        "retentionPolicy": "",
        "name": "influx",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "iplon",
        "bucket": "iGoT",
        "x": 430,
        "y": 400,
        "wires": []
    },
    {
        "id": "7f2557962a224ea8",
        "type": "influxdb batch",
        "z": "7d395c56b48222aa",
        "d": true,
        "influxdb": "33f460a4c4855dbc",
        "precision": "",
        "retentionPolicy": "",
        "name": "influx",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "iplon",
        "bucket": "iGoT",
        "x": 1830,
        "y": 700,
        "wires": []
    },
    {
        "id": "4be6bc715c5fb63a",
        "type": "debug",
        "z": "7d395c56b48222aa",
        "name": "debug 1755",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 510,
        "y": 540,
        "wires": []
    },
    {
        "id": "d6adb58944ce162e",
        "type": "debug",
        "z": "7d395c56b48222aa",
        "name": "debug 1756",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 590,
        "y": 420,
        "wires": []
    },
    {
        "id": "80c915df69022983",
        "type": "cronplus",
        "z": "7d395c56b48222aa",
        "name": "",
        "outputField": "payload",
        "timeZone": "",
        "storeName": "",
        "commandResponseMsgOutput": "output1",
        "defaultLocation": "",
        "defaultLocationType": "default",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "topic1",
                "payloadType": "default",
                "payload": "",
                "expressionType": "cron",
                "expression": "40 3 * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 540,
        "y": 80,
        "wires": [
            [
                "32152ff08350b904"
            ]
        ]
    },
    {
        "id": "1883afe24dd29630",
        "type": "function",
        "z": "e93d40648a0e86e8",
        "name": "function 448",
        "func": "var status = flow.get(\"qac_read\")\nvar obj = {}\nif (status == 1) {\n    var value = flow.get(\"qac_number\")\n    if (value != undefined) {\n        obj.payload = {\n\n            register: 13698,\n            value: value\n\n        }\n        node.send(obj)\n    }\n\n\n}\nelse {\n    msg = {\n        complete: true,\n        payload: {register:false}\n    };\n    return msg;\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 780,
        "wires": [
            [
                "f20ff713d36bef8d"
            ]
        ]
    },
    {
        "id": "5768992bbdc8d783",
        "type": "function",
        "z": "e93d40648a0e86e8",
        "name": "function 449",
        "func": "flow.set(\"qac_read\", msg.payload);\nmsg.payload = { 'read': flow.get(\"qac_read\") }\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 820,
        "wires": [
            [
                "d79ce0dde665c47f"
            ]
        ]
    },
    {
        "id": "d79ce0dde665c47f",
        "type": "switch",
        "z": "e93d40648a0e86e8",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 490,
        "y": 820,
        "wires": [
            [
                "1883afe24dd29630"
            ],
            []
        ]
    },
    {
        "id": "b9a76d96dfe5e7d7",
        "type": "function",
        "z": "e93d40648a0e86e8",
        "name": "function 450",
        "func": "var status = flow.get(\"pac_read\")\nvar obj = {}\nif(status == 1)\n{\n    var value = flow.get(\"pac_number\")\n    if(value != undefined)\n    {\n        obj.payload = {\n\n            register: 13696,\n            value: value\n\n        }\n        node.send(obj)\n    }\n  \n   \n}\nelse\n{\n    msg = {\n        \n        payload:{register:false}       \n    };\n    return msg;\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 680,
        "wires": [
            [
                "0ea7723a2f011f0b"
            ]
        ]
    },
    {
        "id": "cd4d72413676d3a1",
        "type": "switch",
        "z": "e93d40648a0e86e8",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 490,
        "y": 720,
        "wires": [
            [
                "b9a76d96dfe5e7d7"
            ],
            []
        ]
    },
    {
        "id": "9e9a6c67630a8334",
        "type": "function",
        "z": "e93d40648a0e86e8",
        "name": "function 451",
        "func": "var status = flow.get(\"pf_read\")\nvar obj = {}\nif (status == 1) {\n    var value = flow.get(\"pf_number\")\n    if (value != undefined) {\n        obj.payload = {\n\n            register: 13702,\n            value: value\n\n        }\n        node.send(obj)\n    }\n\n\n}\nelse {\n    msg = {\n        complete: true,\n        payload: { register: false }\n    };\n    return msg;\n}\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 880,
        "wires": [
            [
                "9836adcf23fdd2bf"
            ]
        ]
    },
    {
        "id": "62b666f4407acdd2",
        "type": "switch",
        "z": "e93d40648a0e86e8",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 490,
        "y": 920,
        "wires": [
            [
                "9e9a6c67630a8334"
            ],
            []
        ]
    },
    {
        "id": "ead2fc52b32756e4",
        "type": "function",
        "z": "e93d40648a0e86e8",
        "name": "function 452",
        "func": "flow.set(\"pf_read\", msg.payload);\nmsg.payload = { 'read': flow.get(\"pf_read\") }\nreturn msg; \n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 920,
        "wires": [
            [
                "62b666f4407acdd2"
            ]
        ]
    },
    {
        "id": "4c3763ddccfced3d",
        "type": "switch",
        "z": "e93d40648a0e86e8",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 490,
        "y": 1020,
        "wires": [
            [
                "5a4b8b6335f44587"
            ],
            []
        ]
    },
    {
        "id": "ee076ce674e85ab6",
        "type": "function",
        "z": "e93d40648a0e86e8",
        "name": "function 453",
        "func": "flow.set(\"uac12_read\", msg.payload);\nmsg.payload = { 'read': flow.get(\"uac12_read\") }\nreturn msg; \n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 1020,
        "wires": [
            [
                "4c3763ddccfced3d"
            ]
        ]
    },
    {
        "id": "39960a1a17b1bcbc",
        "type": "switch",
        "z": "e93d40648a0e86e8",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 490,
        "y": 1120,
        "wires": [
            [
                "fca5870dec7d3847"
            ],
            []
        ]
    },
    {
        "id": "8b6dbd1e7d727af1",
        "type": "function",
        "z": "e93d40648a0e86e8",
        "name": "function 454",
        "func": "flow.set(\"uac23_read\", msg.payload);\nmsg.payload = { 'read': flow.get(\"uac23_read\") }\nreturn msg; \n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 1120,
        "wires": [
            [
                "39960a1a17b1bcbc"
            ]
        ]
    },
    {
        "id": "d0bbfae1e248e481",
        "type": "switch",
        "z": "e93d40648a0e86e8",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 490,
        "y": 1220,
        "wires": [
            [
                "d3da2a1b8d33d5c1"
            ],
            []
        ]
    },
    {
        "id": "b15cbd8e2a686bcb",
        "type": "function",
        "z": "e93d40648a0e86e8",
        "name": "function 455",
        "func": "flow.set(\"uac31_read\", msg.payload);\nmsg.payload = { 'read': flow.get(\"uac31_read\") }\nreturn msg; \n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 1220,
        "wires": [
            [
                "d0bbfae1e248e481"
            ]
        ]
    },
    {
        "id": "2d2f31318124e177",
        "type": "switch",
        "z": "e93d40648a0e86e8",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 490,
        "y": 1420,
        "wires": [
            [
                "947344d08558b3e7"
            ],
            []
        ]
    },
    {
        "id": "45ca247c2a6b4c59",
        "type": "function",
        "z": "e93d40648a0e86e8",
        "name": "function 456",
        "func": "flow.set(\"iac1_read\", msg.payload);\nmsg.payload = { 'read': flow.get(\"iac1_read\") }\nreturn msg; \n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 1420,
        "wires": [
            [
                "2d2f31318124e177"
            ]
        ]
    },
    {
        "id": "50e3346a5fcb8881",
        "type": "switch",
        "z": "e93d40648a0e86e8",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 490,
        "y": 1320,
        "wires": [
            [
                "595423a4b8628da3"
            ],
            []
        ]
    },
    {
        "id": "cff0936b8247ed11",
        "type": "function",
        "z": "e93d40648a0e86e8",
        "name": "function 457",
        "func": "flow.set(\"fac_read\", msg.payload);\nmsg.payload = { 'read': flow.get(\"fac_read\") }\nreturn msg; \n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 1320,
        "wires": [
            [
                "50e3346a5fcb8881"
            ]
        ]
    },
    {
        "id": "89f5ddf1d05c186c",
        "type": "switch",
        "z": "e93d40648a0e86e8",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 490,
        "y": 1520,
        "wires": [
            [
                "e73b5a026697a879"
            ],
            []
        ]
    },
    {
        "id": "f71e7de35055f30c",
        "type": "function",
        "z": "e93d40648a0e86e8",
        "name": "function 458",
        "func": "flow.set(\"iac2_read\", msg.payload);\nmsg.payload = { 'read': flow.get(\"iac2_read\") }\nreturn msg; \n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 1520,
        "wires": [
            [
                "89f5ddf1d05c186c"
            ]
        ]
    },
    {
        "id": "2f46155f6a0f2526",
        "type": "switch",
        "z": "e93d40648a0e86e8",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 490,
        "y": 1620,
        "wires": [
            [
                "a51a1279debf58cd"
            ],
            []
        ]
    },
    {
        "id": "23040c388ec93bee",
        "type": "function",
        "z": "e93d40648a0e86e8",
        "name": "function 459",
        "func": "flow.set(\"iac3_read\", msg.payload);\nmsg.payload = { 'read': flow.get(\"iac3_read\") }\nreturn msg; \n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 1620,
        "wires": [
            [
                "2f46155f6a0f2526"
            ]
        ]
    },
    {
        "id": "6b7008035608e884",
        "type": "function",
        "z": "e93d40648a0e86e8",
        "name": "function 460",
        "func": "flow.set(\"pac_read\", msg.payload);\nmsg.payload = { 'read': flow.get(\"pac_read\") }\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 720,
        "wires": [
            [
                "cd4d72413676d3a1"
            ]
        ]
    },
    {
        "id": "278f00b6fd3da558",
        "type": "function",
        "z": "e93d40648a0e86e8",
        "name": "function 461",
        "func": "var flag = flow.get(\"pac_read\")\nif(flag == 1)\n{\n    flow.set(\"pac_number\", msg.payload)\n    return msg;\n}\nelse\n{\n    return null;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 680,
        "wires": [
            []
        ]
    },
    {
        "id": "c336ad57240d496f",
        "type": "function",
        "z": "e93d40648a0e86e8",
        "name": "function 462",
        "func": "flow.set(\"qac_number\",msg.payload)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 780,
        "wires": [
            []
        ]
    },
    {
        "id": "7103bd720dca8e5e",
        "type": "inject",
        "z": "e93d40648a0e86e8",
        "name": "",
        "props": [],
        "repeat": "0.5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 510,
        "y": 780,
        "wires": [
            [
                "1883afe24dd29630"
            ]
        ]
    },
    {
        "id": "5b42f89da88919c6",
        "type": "function",
        "z": "e93d40648a0e86e8",
        "name": "function 463",
        "func": "flow.set(\"pf_number\",msg.payload)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 880,
        "wires": [
            []
        ]
    },
    {
        "id": "ee1dc14795c4947b",
        "type": "inject",
        "z": "e93d40648a0e86e8",
        "name": "",
        "props": [],
        "repeat": "0.5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 510,
        "y": 880,
        "wires": [
            [
                "9e9a6c67630a8334"
            ]
        ]
    },
    {
        "id": "5a4b8b6335f44587",
        "type": "function",
        "z": "e93d40648a0e86e8",
        "name": "function 464",
        "func": "var status = flow.get(\"uac12_read\")\nvar obj = {}\nif (status == 1) {\n    var value = flow.get(\"uac12_number\")\n    if (value != undefined) {\n        obj.payload = {\n\n            register: 13372,\n            value: value\n\n        }\n        node.send(obj)\n    }\n\n\n}\nelse \n{\n    msg = {\n        complete: true,\n        payload: { register: false }\n    };\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 980,
        "wires": [
            [
                "9ed3e282f5d5afb4"
            ]
        ]
    },
    {
        "id": "a8818b912c0a4236",
        "type": "inject",
        "z": "e93d40648a0e86e8",
        "name": "",
        "props": [],
        "repeat": "0.5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 510,
        "y": 980,
        "wires": [
            [
                "5a4b8b6335f44587"
            ]
        ]
    },
    {
        "id": "7054319e2164045a",
        "type": "function",
        "z": "e93d40648a0e86e8",
        "name": "function 465",
        "func": "flow.set(\"uac12_number\",msg.payload)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 980,
        "wires": [
            []
        ]
    },
    {
        "id": "d5b05985fcbb6374",
        "type": "function",
        "z": "e93d40648a0e86e8",
        "name": "function 466",
        "func": "flow.set(\"uac23_number\",msg.payload)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 1080,
        "wires": [
            []
        ]
    },
    {
        "id": "fca5870dec7d3847",
        "type": "function",
        "z": "e93d40648a0e86e8",
        "name": "function 467",
        "func": "var status = flow.get(\"uac23_read\")\nvar obj = {}\nif (status == 1) {\n    var value = flow.get(\"uac23_number\")\n    if (value != undefined) {\n        obj.payload = {\n\n            register: 13374,\n            value: value\n\n        }\n        node.send(obj)\n    }\n\n\n}\nelse {\n    msg = {\n        complete: true,\n        payload: { register: false }\n    };\n    return msg;\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 1080,
        "wires": [
            [
                "27ad11c1060a089c"
            ]
        ]
    },
    {
        "id": "5a62c6f6000d24ed",
        "type": "inject",
        "z": "e93d40648a0e86e8",
        "name": "",
        "props": [],
        "repeat": "0.5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 510,
        "y": 1080,
        "wires": [
            [
                "fca5870dec7d3847"
            ]
        ]
    },
    {
        "id": "af9d21c04e1fbff3",
        "type": "function",
        "z": "e93d40648a0e86e8",
        "name": "function 468",
        "func": "flow.set(\"uac31_number\",msg.payload)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 1180,
        "wires": [
            []
        ]
    },
    {
        "id": "d3da2a1b8d33d5c1",
        "type": "function",
        "z": "e93d40648a0e86e8",
        "name": "function 469",
        "func": "var status = flow.get(\"uac31_read\")\nvar obj = {}\nif (status == 1) {\n    var value = flow.get(\"uac31_number\")\n    if (value != undefined) {\n        obj.payload = {\n\n            register: 13376,\n            value: value\n\n        }\n        node.send(obj)\n    }\n\n\n}\nelse {\n    msg = {\n        complete: true,\n        payload: { register: false }\n    };\n    return msg;\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 1180,
        "wires": [
            [
                "6c5201b0de97f954"
            ]
        ]
    },
    {
        "id": "d9264bbd3182aa8e",
        "type": "inject",
        "z": "e93d40648a0e86e8",
        "name": "",
        "props": [],
        "repeat": "0.5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 510,
        "y": 1180,
        "wires": [
            [
                "d3da2a1b8d33d5c1"
            ]
        ]
    },
    {
        "id": "cf45fda148bcd44a",
        "type": "function",
        "z": "e93d40648a0e86e8",
        "name": "function 470",
        "func": "flow.set(\"fac_number\",msg.payload)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 1280,
        "wires": [
            []
        ]
    },
    {
        "id": "ab86959508f271ca",
        "type": "function",
        "z": "e93d40648a0e86e8",
        "name": "function 471",
        "func": "flow.set(\"iac1_number\",msg.payload)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 1380,
        "wires": [
            []
        ]
    },
    {
        "id": "3807042f6c051b22",
        "type": "function",
        "z": "e93d40648a0e86e8",
        "name": "function 472",
        "func": "flow.set(\"iac2_number\",msg.payload)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 1480,
        "wires": [
            []
        ]
    },
    {
        "id": "3746d3e039d9a1a3",
        "type": "function",
        "z": "e93d40648a0e86e8",
        "name": "function 473",
        "func": "flow.set(\"iac3_number\",msg.payload)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 1580,
        "wires": [
            []
        ]
    },
    {
        "id": "595423a4b8628da3",
        "type": "function",
        "z": "e93d40648a0e86e8",
        "name": "function 474",
        "func": "var status = flow.get(\"fac_read\")\nvar obj = {}\nif (status == 1) {\n    var value = flow.get(\"fac_number\")\n    if (value != undefined) {\n        obj.payload = {\n\n            register: 13828,\n            value: value\n\n        }\n        node.send(obj)\n    }\n\n\n}\nelse {\n    msg = {\n        complete: true,\n        payload: { register: false }\n    };\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 1280,
        "wires": [
            [
                "79a8bfe305fca25a"
            ]
        ]
    },
    {
        "id": "ced9c1046ee3d07e",
        "type": "inject",
        "z": "e93d40648a0e86e8",
        "name": "",
        "props": [],
        "repeat": "0.5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 510,
        "y": 1280,
        "wires": [
            [
                "595423a4b8628da3"
            ]
        ]
    },
    {
        "id": "947344d08558b3e7",
        "type": "function",
        "z": "e93d40648a0e86e8",
        "name": "function 475",
        "func": "var status = flow.get(\"iac1_read\")\nvar obj = {}\nif (status == 1) {\n    var value = flow.get(\"iac1_number\")\n    if (value != undefined) {\n        obj.payload = {\n\n            register: 13318,\n            value: value\n\n        }\n        node.send(obj)\n    }\n\n\n}\nelse {\n    msg = {\n        complete: true,\n        payload: { register: false }\n    };\n    return msg;\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 1380,
        "wires": [
            [
                "a62a6651412a7bb5"
            ]
        ]
    },
    {
        "id": "692895f29e33204f",
        "type": "inject",
        "z": "e93d40648a0e86e8",
        "name": "",
        "props": [],
        "repeat": "0.5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 510,
        "y": 1380,
        "wires": [
            [
                "947344d08558b3e7"
            ]
        ]
    },
    {
        "id": "e73b5a026697a879",
        "type": "function",
        "z": "e93d40648a0e86e8",
        "name": "function 476",
        "func": "var status = flow.get(\"iac2_read\")\nvar obj = {}\nif (status == 1) {\n    var value = flow.get(\"iac2_number\")\n    if (value != undefined) {\n        obj.payload = {\n\n            register: 13320,\n            value: value\n\n        }\n        node.send(obj)\n    }\n\n\n}\nelse {\n    msg = {\n        complete: true,\n        payload: { register: false }\n    };\n    return msg;\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 1480,
        "wires": [
            [
                "30af514b5ebd4363"
            ]
        ]
    },
    {
        "id": "e61156d4c4fa3c89",
        "type": "inject",
        "z": "e93d40648a0e86e8",
        "name": "",
        "props": [],
        "repeat": "0.5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 510,
        "y": 1480,
        "wires": [
            [
                "e73b5a026697a879"
            ]
        ]
    },
    {
        "id": "a51a1279debf58cd",
        "type": "function",
        "z": "e93d40648a0e86e8",
        "name": "function 477",
        "func": "var status = flow.get(\"iac3_read\")\nvar obj = {}\nif (status == 1) {\n    var value = flow.get(\"iac3_number\")\n    if (value != undefined) {\n        obj.payload = {\n\n            register: 13322,\n            value: value\n\n        }\n        node.send(obj)\n    }\n\n\n}\nelse {\n    msg = {\n        complete: true,\n        payload: { register: false }\n    };\n    return msg;\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 1580,
        "wires": [
            [
                "a5c976bd96c90f37"
            ]
        ]
    },
    {
        "id": "5efb2960d98ec2e7",
        "type": "inject",
        "z": "e93d40648a0e86e8",
        "name": "",
        "props": [],
        "repeat": "0.5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 510,
        "y": 1580,
        "wires": [
            [
                "a51a1279debf58cd"
            ]
        ]
    },
    {
        "id": "7391cca2c2e91887",
        "type": "join",
        "z": "e93d40648a0e86e8",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "1",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1070,
        "y": 1120,
        "wires": [
            [
                "8ab1df272029fc6d"
            ]
        ]
    },
    {
        "id": "c2d84daa5c96a8b9",
        "type": "inject",
        "z": "e93d40648a0e86e8",
        "name": "",
        "props": [],
        "repeat": "0.5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 510,
        "y": 680,
        "wires": [
            [
                "b9a76d96dfe5e7d7"
            ]
        ]
    },
    {
        "id": "0ea7723a2f011f0b",
        "type": "change",
        "z": "e93d40648a0e86e8",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "set",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 810,
        "y": 680,
        "wires": [
            [
                "7391cca2c2e91887"
            ]
        ]
    },
    {
        "id": "f20ff713d36bef8d",
        "type": "change",
        "z": "e93d40648a0e86e8",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "set",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 810,
        "y": 780,
        "wires": [
            [
                "7391cca2c2e91887"
            ]
        ]
    },
    {
        "id": "9836adcf23fdd2bf",
        "type": "change",
        "z": "e93d40648a0e86e8",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "set",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 810,
        "y": 880,
        "wires": [
            [
                "7391cca2c2e91887"
            ]
        ]
    },
    {
        "id": "9ed3e282f5d5afb4",
        "type": "change",
        "z": "e93d40648a0e86e8",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "set",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 810,
        "y": 980,
        "wires": [
            [
                "7391cca2c2e91887"
            ]
        ]
    },
    {
        "id": "27ad11c1060a089c",
        "type": "change",
        "z": "e93d40648a0e86e8",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "set",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 810,
        "y": 1080,
        "wires": [
            [
                "7391cca2c2e91887"
            ]
        ]
    },
    {
        "id": "6c5201b0de97f954",
        "type": "change",
        "z": "e93d40648a0e86e8",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "set",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 810,
        "y": 1180,
        "wires": [
            [
                "7391cca2c2e91887"
            ]
        ]
    },
    {
        "id": "79a8bfe305fca25a",
        "type": "change",
        "z": "e93d40648a0e86e8",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "set",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 810,
        "y": 1280,
        "wires": [
            [
                "7391cca2c2e91887"
            ]
        ]
    },
    {
        "id": "a62a6651412a7bb5",
        "type": "change",
        "z": "e93d40648a0e86e8",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "set",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 810,
        "y": 1380,
        "wires": [
            [
                "7391cca2c2e91887"
            ]
        ]
    },
    {
        "id": "30af514b5ebd4363",
        "type": "change",
        "z": "e93d40648a0e86e8",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "set",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 810,
        "y": 1480,
        "wires": [
            [
                "7391cca2c2e91887"
            ]
        ]
    },
    {
        "id": "a5c976bd96c90f37",
        "type": "change",
        "z": "e93d40648a0e86e8",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "set",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 810,
        "y": 1580,
        "wires": [
            [
                "7391cca2c2e91887"
            ]
        ]
    },
    {
        "id": "331617b86f1fb750",
        "type": "function",
        "z": "e93d40648a0e86e8",
        "name": "function 478",
        "func": "let set_array = []\nfor(var i = 0; i < msg.payload.length; i++)\n{\n    if (msg.payload[i].set.register != false)\n    {\n        var obj = {}\n        obj.payload = {\n            register: msg.payload[i].set.register,\n            value: msg.payload[i].set.value\n        }\n        set_array.push(obj)\n    }\n}\nmsg.payload = set_array \n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1330,
        "y": 1120,
        "wires": [
            [
                "3a9fec659ab1c6e5"
            ]
        ]
    },
    {
        "id": "8ab1df272029fc6d",
        "type": "join",
        "z": "e93d40648a0e86e8",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "10",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1190,
        "y": 1120,
        "wires": [
            [
                "331617b86f1fb750"
            ]
        ]
    },
    {
        "id": "3a9fec659ab1c6e5",
        "type": "change",
        "z": "e93d40648a0e86e8",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "set_value",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1490,
        "y": 1120,
        "wires": [
            [
                "368a2e8dd8ac8ea4",
                "fdb8e4fd94d680eb"
            ]
        ]
    },
    {
        "id": "10d4761cc333d15b",
        "type": "inject",
        "z": "e93d40648a0e86e8",
        "name": "",
        "props": [],
        "repeat": "0.5",
        "crontab": "",
        "once": false,
        "onceDelay": "20",
        "topic": "",
        "x": 170,
        "y": 240,
        "wires": [
            [
                "76bd64f1c6ef350d"
            ]
        ]
    },
    {
        "id": "76bd64f1c6ef350d",
        "type": "template",
        "z": "e93d40648a0e86e8",
        "name": "conf file",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,read_reg_id,read_reg_type,fun_code,unit_id,addr_qty,write_reg_id,write_reg_type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,13696,S32,3,1,2,13696,S32,CR,CR_EM01,EM01,EM01,EM,PAC,PAC,Server8582,8582,1,iplon_test,0,new,MW,0.001\n2,13698,S32,3,1,2,13698,S32,CR,CR_EM01,EM01,EM01,EM,QAC,QAC,Server8582,8582,1,iplon_test,,,MVAr,0.00001\n3,13702,S32,3,1,2,13702,S32,CR,CR_EM01,EM01,EM01,EM,PF,PF,Server8582,8582,1,iplon_test,,,,0.001\n4,13372,U32,3,1,2,13372,S32,CR,CR_EM01,EM01,EM01,EM,UAC12,UAC12,Server8582,8582,1,iplon_test,,,kV,0.001\n5,13374,U32,3,1,2,13374,S32,CR,CR_EM01,EM01,EM01,EM,UAC23,UAC23,Server8582,8582,1,iplon_test,,,kV,0.001\n6,13376,U32,3,1,2,13376,S32,CR,CR_EM01,EM01,EM01,EM,UAC31,UAC31,Server8582,8582,1,iplon_test,,,kV,0.001\n7,13828,U32,3,1,2,13828,U32,CR,CR_EM01,EM01,EM01,EM,FAC,FAC,Server8582,8582,1,iplon_test,,,Hz,0.01\n8,13318,U32,3,1,2,13318,U32,CR,CR_EM01,EM01,EM01,EM,IAC1,IAC1,Server8582,8582,1,iplon_test,,,A,1\n9,13320,U32,3,1,2,13320,U32,CR,CR_EM01,EM01,EM01,EM,IAC2,IAC2,Server8582,8582,1,iplon_test,,,A,1\n10,13322,U32,3,1,2,13322,U32,CR,CR_EM01,EM01,EM01,EM,IAC3,IAC3,Server8582,8582,1,iplon_test,,,A,1",
        "output": "str",
        "x": 300,
        "y": 240,
        "wires": [
            [
                "cf7ed6b0fb15c171"
            ]
        ]
    },
    {
        "id": "ef3f36d3936de66b",
        "type": "function",
        "z": "e93d40648a0e86e8",
        "name": "VR_EM",
        "func": "var obj = {};\nvar obj1 = {};\nlet array = []\nvar time = new Date().getTime()\nfor (var i = 0; i < msg.payload.length; i++) {\n    \n    var arr = msg.payload[i].calculated_field.split(\"+\")\n    var val = 0\n    if (msg.payload[i].type == \"SUM\")\n    {\n        for (var j = 0; j < arr.length; j++)\n        {\n            var tmp_val = global.get(arr[j])\n           \n            val = val + tmp_val\n           \n        }\n    }\n    else if(msg.payload[i].type == \"AVG\")\n    {\n        var arr_length = arr.length\n        for (var j = 0; j < arr.length; j++)\n        {\n            var tmp_val = global.get(arr[j])\n            val = val + tmp_val\n        }\n        val = val / arr_length;\n    }\n    val = (val * msg.payload[i].mf).toFixed(2);\n    val = parseFloat(val)\n\n    obj = {\n        value: val,\n        b: msg.payload[i].b,\n        bd: msg.payload[i].bd,\n        d: msg.payload[i].d,\n        dd: msg.payload[i].dd,\n        dt: msg.payload[i].dt,\n        f: msg.payload[i].f,\n        fd: msg.payload[i].fd,\n        h: msg.payload[i].h,\n        iid: msg.payload[i].iid,\n        m: msg.payload[i].m,\n        p: msg.payload[i].p,\n        qu: msg.payload[i].qu,\n        text: msg.payload[i].text,\n        u: msg.payload[i].u,\n        mf: msg.payload[i].mf,\n        reg_id: msg.payload[i].vr_wr_reg,\n        data_type:msg.payload[i].data_type,\n        qty:msg.payload[i].qty,\n        fc:msg.payload[i].fc,\n        time:time\n    }\n   array.push(obj)\n}\nmsg.payload = array\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 400,
        "wires": [
            [
                "81149d32e6630a5d"
            ]
        ]
    },
    {
        "id": "30884ac47630cfcf",
        "type": "inject",
        "z": "e93d40648a0e86e8",
        "name": "inject",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "0.2",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 400,
        "wires": [
            [
                "407c8b55984b4c1b"
            ]
        ]
    },
    {
        "id": "407c8b55984b4c1b",
        "type": "template",
        "z": "e93d40648a0e86e8",
        "name": "sdf",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,vr_wr_reg,data_type,qty,fc,calculated_field,type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,13696,S16,1,6,CR.EM01.PAC,SUM,CR,CR,EM01,CR_EM01,EM,PAC,PAC,Server8582,8582,1,iplon_test,0,,MW,0.001\n2,13698,S16,1,6,CR.EM01.QAC,SUM,CR,CR,EM01,CR_EM01,EM,QAC,QAC,Server8582,8582,1,iplon_test,0,,MW,0.001\n3,13702,S16,1,6,CR.EM01.PF,SUM,CR,CR,EM01,CR_EM01,EM,PF,PF,Server8582,8582,1,iplon_test,0,,MW,0.001\n4,13372,S16,1,6,CR.EM01.UAC12,SUM,CR,CR_EM01,EM01,EM01,EM,UAC12,UAC12,Server8582,8582,1,iplon_test,,,kV,0.001\n5,13374,S16,1,6,CR.EM01.UAC23,SUM,CR,CR_EM01,EM01,EM01,EM,UAC23,UAC23,Server8582,8582,1,iplon_test,,,kV,0.001\n6,13376,S16,1,6,CR.EM01.UAC31,SUM,CR,CR_EM01,EM01,EM01,EM,UAC31,UAC31,Server8582,8582,1,iplon_test,,,kV,0.001\n7,13828,U16,1,6,CR.EM01.FAC,SUM,CR,CR_EM01,EM01,EM01,EM,FAC,FAC,Server8582,8582,1,iplon_test,,,Hz,0.01\n8,13318,U16,1,6,CR.EM01.IAC1,SUM,CR,CR_EM01,EM01,EM01,EM,IAC1,IAC1,Server8582,8582,1,iplon_test,,,A,0.01\n9,13320,U16,1,6,CR.EM01.IAC2,SUM,CR,CR_EM01,EM01,EM01,EM,IAC2,IAC2,Server8582,8582,1,iplon_test,,,A,0.01\n10,13322,U16,1,6,CR.EM01.IAC3,SUM,CR,CR_EM01,EM01,EM01,EM,IAC3,IAC3,Server8582,8582,1,iplon_test,,,A,0.01",
        "output": "str",
        "x": 290,
        "y": 400,
        "wires": [
            [
                "9f10d7332199708f"
            ]
        ]
    },
    {
        "id": "9f10d7332199708f",
        "type": "csv",
        "z": "e93d40648a0e86e8",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 410,
        "y": 400,
        "wires": [
            [
                "ef3f36d3936de66b"
            ]
        ]
    },
    {
        "id": "35d5bebcb228214a",
        "type": "debug",
        "z": "e93d40648a0e86e8",
        "name": "debug 1581",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 890,
        "y": 440,
        "wires": []
    },
    {
        "id": "81149d32e6630a5d",
        "type": "function",
        "z": "e93d40648a0e86e8",
        "name": "influxdb",
        "func": "\nvar time = new Date().getTime()\nvar array = []\narray.length = 0\nvar obj1 = {}\nfor (var i = 0; i < msg.payload.length; i++) {    \n    var val1 = msg.payload[i].value\n    if(!isNaN(val1))\n    {   \n        var cal_val = parseFloat(val1)\n\n         var obj = {\n        \"measurement\": \"v\",\n        \"fields\": {\n            \"qu\": 0,\n            \"text\": \"\",\n            \"value\": val1\n        },\n        \"tags\": {\n            \"b\": msg.payload[i].b,\n            \"bd\": msg.payload[i].bd,\n            \"d\": msg.payload[i].d,\n            \"dd\": msg.payload[i].dd,\n            \"dt\": msg.payload[i].dt,\n            \"f\": msg.payload[i].f,\n            \"fd\": msg.payload[i].fd,\n            \"h\": msg.payload[i].h,\n            \"iid\": msg.payload[i].iid,\n            \"m\": msg.payload[i].m,\n            \"p\": msg.payload[i].p,\n            \"u\": \"\"\n        },\n        \"timestamp\": time,\n    }\n \n        array.push(obj)\n    }\n}\nif(array.length != 0)\n{\n    msg.payload = array\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 400,
        "wires": [
            [
                "ef58bbd0c453efb7"
            ]
        ]
    },
    {
        "id": "f42d4842665e79dd",
        "type": "function",
        "z": "e93d40648a0e86e8",
        "name": "VR_EM",
        "func": "var obj = {};\nvar obj1 = {};\nlet array = []\nvar time = new Date().getTime()\nfor (var i = 0; i < msg.payload.length; i++) {    \n    var arr = msg.payload[i].calculated_field.split(\"+\")\n    var val = 0\n    if (msg.payload[i].type == \"SUM\")\n    {\n        for (var j = 0; j < arr.length; j++)\n        {\n            var tmp_val = global.get(arr[j])           \n            val = val + tmp_val           \n        }\n    }\n    else if(msg.payload[i].type == \"AVG\")\n    {\n        var arr_length = arr.length\n        for (var j = 0; j < arr.length; j++)\n        {\n            var tmp_val = global.get(arr[j])\n            val = val + tmp_val\n        }\n        val = val / arr_length;\n    }\n    val = (val * msg.payload[i].mf).toFixed(2);\n    val = parseFloat(val)\n\n    obj = {\n        value: val,\n        b: msg.payload[i].b,\n        bd: msg.payload[i].bd,\n        d: msg.payload[i].d,\n        dd: msg.payload[i].dd,\n        dt: msg.payload[i].dt,\n        f: msg.payload[i].f,\n        fd: msg.payload[i].fd,\n        h: msg.payload[i].h,\n        iid: msg.payload[i].iid,\n        m: msg.payload[i].m,\n        p: msg.payload[i].p,\n        qu: msg.payload[i].qu,\n        text: msg.payload[i].text,\n        u: msg.payload[i].u,\n        mf: msg.payload[i].mf,\n        reg_id: msg.payload[i].vr_wr_reg,\n        data_type:msg.payload[i].data_type,\n        qty:msg.payload[i].qty,\n        fc:msg.payload[i].fc,\n        time:time\n    }\n    node.send(obj)\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 580,
        "wires": [
            [
                "3c877d6368c2d1cb",
                "c262a358f8ef51a0"
            ]
        ]
    },
    {
        "id": "d60db58fddb027e6",
        "type": "inject",
        "z": "e93d40648a0e86e8",
        "name": "inject",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "0.2",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 580,
        "wires": [
            [
                "3485c0ddf2e433f8"
            ]
        ]
    },
    {
        "id": "3485c0ddf2e433f8",
        "type": "template",
        "z": "e93d40648a0e86e8",
        "name": "sdf",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "S.No,vr_wr_reg,data_type,qty,fc,calculated_field,type,b,bd,d,dd,dt,f,fd,h,iid,m,p,qu,text,u,mf\n1,13696,S32,2,16,CR.EM01.PAC,SUM,CR,CR,EM01,CR_EM01,EM,PAC,PAC,Server8582,8582,1,iplon_test,0,,MW,1\n2,13698,S32,2,16,CR.EM01.QAC,SUM,CR,CR,EM01,CR_EM01,EM,QAC,QAC,Server8582,8582,1,iplon_test,0,,MW,1\n3,13702,S32,2,16,CR.EM01.PF,SUM,CR,CR,EM01,CR_EM01,EM,PF,PF,Server8582,8582,1,iplon_test,0,,MW,1\n4,13372,U32,2,16,CR.EM01.UAC12,SUM,CR,CR_EM01,EM01,EM01,EM,UAC12,UAC12,Server8582,8582,1,iplon_test,,,kV,1\n5,13374,U32,2,16,CR.EM01.UAC23,SUM,CR,CR_EM01,EM01,EM01,EM,UAC23,UAC23,Server8582,8582,1,iplon_test,,,kV,1\n6,13376,U32,2,16,CR.EM01.UAC31,SUM,CR,CR_EM01,EM01,EM01,EM,UAC31,UAC31,Server8582,8582,1,iplon_test,,,kV,1\n7,13828,U32,2,16,CR.EM01.FAC,SUM,CR,CR_EM01,EM01,EM01,EM,FAC,FAC,Server8582,8582,1,iplon_test,,,Hz,1\n8,13318,U32,2,16,CR.EM01.IAC1,SUM,CR,CR_EM01,EM01,EM01,EM,IAC1,IAC1,Server8582,8582,1,iplon_test,,,A,1\n9,13320,U32,2,16,CR.EM01.IAC2,SUM,CR,CR_EM01,EM01,EM01,EM,IAC2,IAC2,Server8582,8582,1,iplon_test,,,A,1\n10,13322,U32,2,16,CR.EM01.IAC3,SUM,CR,CR_EM01,EM01,EM01,EM,IAC3,IAC3,Server8582,8582,1,iplon_test,,,A,1",
        "output": "str",
        "x": 290,
        "y": 580,
        "wires": [
            [
                "d9a0f4ab87be773b"
            ]
        ]
    },
    {
        "id": "d9a0f4ab87be773b",
        "type": "csv",
        "z": "e93d40648a0e86e8",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 410,
        "y": 580,
        "wires": [
            [
                "f42d4842665e79dd"
            ]
        ]
    },
    {
        "id": "3c877d6368c2d1cb",
        "type": "debug",
        "z": "e93d40648a0e86e8",
        "name": "MQTT PPC",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 690,
        "y": 540,
        "wires": []
    },
    {
        "id": "d42198048152d7d0",
        "type": "function",
        "z": "e93d40648a0e86e8",
        "name": "modtcp write",
        "func": "for (var i = 0; i < msg.payload.length; i++)\n{\n    if (msg.payload[i].data_type == 'U16')\n    {\n        var values1 = msg.payload[i].value\n        var msg3 = {};\n        msg3.payload = { \"value\": values1, 'fc': msg.payload[i].fc, 'unitid': 1, 'address': msg.payload[i].address, 'quantity': msg.payload[i].qty };\n        node.send(msg3);\n    }\n    else if (msg.payload[i].data_type == 'S16') \n    {\n        const signedInteger = msg.payload[i].value;\n        // Convert the signed integer to its decimal representation\n        const decimalValue = (signedInteger < 0) ? (0xFFFF + signedInteger + 1) : signedInteger;\n        var msg4 = {};\n        msg4.payload = { \"value\": decimalValue, 'fc': msg.payload[i].fc, 'unitid': 1, 'address': msg.payload[i].address, 'quantity': msg.payload[i].qty };\n        node.send(msg4);\n    }\n    else if (msg.payload[i].data_type == 'S32') \n    {\n        var buf = Buffer.alloc(4);\n        buf.writeInt32BE(msg.payload[i].value);\n        var values = [(buf[0] * 256 + buf[1]), (buf[2] * 256) + buf[3]]     \n        var msg1 = {};   \n        msg1.payload = { \"value\": values, 'fc': msg.payload[i].fc, 'unitid': 1, 'address': msg.payload[i].address, 'quantity': msg.payload[i].qty };   \n        node.send(msg1);\n        \n    }\n    else if (msg.payload[i].data_type == 'U32') {\n        var buf = Buffer.alloc(4);\n        buf.writeUInt32BE(msg.payload[i].value);\n        var values = [(buf[0] * 256 + buf[1]), (buf[2] * 256) + buf[3]]\n        var msg2 = {};\n        msg2.payload = { \"value\": values, 'fc': msg.payload[i].fc, 'unitid': 1, 'address': msg.payload[i].address, 'quantity': msg.payload[i].qty };\n        node.send(msg2);\n\n    }    \n}\n\nreturn null;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1430,
        "y": 580,
        "wires": [
            [
                "e09a3d0e650863c5",
                "50dedbd4015a1aae"
            ]
        ]
    },
    {
        "id": "50dedbd4015a1aae",
        "type": "modbus-flex-write",
        "z": "e93d40648a0e86e8",
        "name": "",
        "showStatusActivities": true,
        "showErrors": true,
        "showWarnings": true,
        "server": "e1ec8b713566e44c",
        "emptyMsgOnFail": true,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 1710,
        "y": 580,
        "wires": [
            [
                "bfb78e1d4b5facdb"
            ],
            []
        ]
    },
    {
        "id": "e09a3d0e650863c5",
        "type": "debug",
        "z": "e93d40648a0e86e8",
        "name": "debug 1580",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1570,
        "y": 620,
        "wires": []
    },
    {
        "id": "c262a358f8ef51a0",
        "type": "change",
        "z": "e93d40648a0e86e8",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "client",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 690,
        "y": 580,
        "wires": [
            [
                "db2e29b6f83d10e9"
            ]
        ]
    },
    {
        "id": "db2e29b6f83d10e9",
        "type": "join",
        "z": "e93d40648a0e86e8",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "",
        "propertyType": "full",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "10",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 830,
        "y": 580,
        "wires": [
            [
                "368a2e8dd8ac8ea4"
            ]
        ]
    },
    {
        "id": "368a2e8dd8ac8ea4",
        "type": "function",
        "z": "e93d40648a0e86e8",
        "name": "combine",
        "func": "context.data = context.data || {};\nswitch (msg.topic) {\n    case \"client\":\n        context.data.client = msg.payload;\n        msg = null;\n        break;\n    case \"set_value\":\n        context.data.set_value = msg.payload;\n        msg = null;\n        break;\n}\nif (context.data.client != null && context.data.set_value != null) {\n    var data_combine = {\n        \"client\": context.data.client,        \n        \"set_value\": context.data.set_value\n\n    }\n    context.data = null\n    return { payload: data_combine };\n}  \n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 580,
        "wires": [
            [
                "414e2347cb640345"
            ]
        ]
    },
    {
        "id": "414e2347cb640345",
        "type": "function",
        "z": "e93d40648a0e86e8",
        "name": "function 479",
        "func": "// Assuming msg.payload contains the parsed CSV data (an array of objects)\n\nvar obj = {}\nvar obj1 = {}\nvar array = []\nfor (var i = 0; i < msg.payload.client.length; i++) {\n    for (var j = 0; j < msg.payload.set_value.length; j++) {\n\n        if (msg.payload.client[i].reg_id === msg.payload.set_value[j].payload.register) {\n\n            obj =\n            {\n                value: msg.payload.set_value[j].payload.value,\n                register: msg.payload.client[i].reg_id,\n                data_type: msg.payload.client[i].data_type,\n                address: msg.payload.client[i].reg_id,\n                qty: msg.payload.client[i].qty,\n                fc: msg.payload.client[i].fc\n            }\n            var reg = msg.payload.client[i].reg_id\n            array.push(obj)\n\n        }\n\n\n    }\n    if (reg != msg.payload.client[i].reg_id) {\n        obj =\n        {\n            value: msg.payload.client[i].value,\n            register: msg.payload.client[i].reg_id,\n            data_type: msg.payload.client[i].data_type,\n            address: msg.payload.client[i].reg_id,\n            qty: msg.payload.client[i].qty,\n            fc: msg.payload.client[i].fc\n        }\n\n        array.push(obj)\n    }\n\n}\n\nmsg.payload = array\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1110,
        "y": 580,
        "wires": [
            [
                "7b70bd7e5f9cc030"
            ]
        ]
    },
    {
        "id": "7b70bd7e5f9cc030",
        "type": "change",
        "z": "e93d40648a0e86e8",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "client",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1270,
        "y": 580,
        "wires": [
            [
                "d42198048152d7d0",
                "90fb0ba76fdd56f0",
                "5defe14c0783f44d"
            ]
        ]
    },
    {
        "id": "5defe14c0783f44d",
        "type": "debug",
        "z": "e93d40648a0e86e8",
        "name": "debug 1661",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1430,
        "y": 700,
        "wires": []
    },
    {
        "id": "54701bc5d18b1b68",
        "type": "catch",
        "z": "e93d40648a0e86e8",
        "name": "",
        "scope": [
            "50dedbd4015a1aae",
            "13bef87597b78cb0",
            "df43ca120e347c53"
        ],
        "uncaught": false,
        "x": 270,
        "y": 60,
        "wires": [
            [
                "481c60e82039a2f5",
                "d5291b36218c6b1b"
            ]
        ]
    },
    {
        "id": "55d12287dd1b885f",
        "type": "status",
        "z": "e93d40648a0e86e8",
        "name": "",
        "scope": [
            "13bef87597b78cb0"
        ],
        "x": 1520,
        "y": 80,
        "wires": [
            [
                "772eb3e541600e4a"
            ]
        ]
    },
    {
        "id": "772eb3e541600e4a",
        "type": "debug",
        "z": "e93d40648a0e86e8",
        "name": "debug 1683",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1710,
        "y": 80,
        "wires": []
    },
    {
        "id": "13bef87597b78cb0",
        "type": "modbus-flex-server",
        "z": "e93d40648a0e86e8",
        "name": "",
        "logEnabled": true,
        "serverAddress": "192.168.90.172",
        "serverPort": "502",
        "responseDelay": "100",
        "unitId": 1,
        "delayUnit": "ms",
        "coilsBufferSize": "40000",
        "registersBufferSize": "40000",
        "minAddress": "0",
        "splitAddress": "20000",
        "funcGetCoil": "function getFlexCoil(addr, unitID) {\n\tif (unitID === node.unitId && \n\t\taddr >= node.minAddress && \n\t\taddr <= node.splitAddress) { \n\n\t\treturn node.coils.readUInt8(addr * node.bufferFactor) \n\t}  \n}",
        "funcGetDiscreteInput": "function getFlexDiscreteInput(addr, unitID) {\n\taddr += node.splitAddress\n\tif (unitID === node.unitId && \n\t\taddr >= node.splitAddress && \n\t\taddr <= node.splitAddress * 2) { \n\n\t\treturn node.coils.readUInt8(addr * node.bufferFactor) \n\t}  \n}",
        "funcGetInputRegister": "function getFlexInputRegister(addr, unitID) { \n\tif (unitID === node.unitId && \n\t\taddr >= node.minAddress && \n\t\taddr <= node.splitAddress) { \n\n\t\treturn node.registers.readUInt16BE(addr * node.bufferFactor)  \n\t} \n}",
        "funcGetHoldingRegister": "function getFlexHoldingRegsiter(addr, unitID) { \n\taddr += node.splitAddress\n\tif (unitID === node.unitId && \n\t\taddr >= node.splitAddress && \n\t\taddr <= node.splitAddress * 2) { \n\n\t\treturn node.registers.readUInt16BE(addr * node.bufferFactor)  \n\t} \n}",
        "funcSetCoil": "function setFlexCoil(addr, value, unitID) { \n\tif (unitID === node.unitId && \n\t\taddr >= node.minAddress && \n\t\taddr <= node.splitAddress) { \n\n\t\tnode.coils.writeUInt8(value, addr * node.bufferFactor)  \n\t} \n}",
        "funcSetRegister": "function setFlexRegister(addr, value, unitID) { \n\taddr += node.splitAddress\n\tif (unitID === node.unitId && \n\t\taddr >= node.splitAddress && \n\t\taddr <= node.splitAddress * 2) { \n\n\t\tnode.registers.writeUInt16BE(value, addr * node.bufferFactor)  \n\t} \n}",
        "showErrors": true,
        "x": 1220,
        "y": 400,
        "wires": [
            [],
            [],
            [],
            [],
            []
        ]
    },
    {
        "id": "481c60e82039a2f5",
        "type": "function",
        "z": "e93d40648a0e86e8",
        "name": "function 511",
        "func": "const error = msg.error.stack\n\nconst errorPattern = /PortNotOpenError: Port Not Open/;\n\nif (errorPattern.test(error))\n{\n  msg.topic = \"error\"\n} \nelse\n{\n  msg.topic = \"no error\"\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 60,
        "wires": [
            [
                "fa5f77394f92df37"
            ]
        ]
    },
    {
        "id": "9d4700ed5f574d6a",
        "type": "function",
        "z": "e93d40648a0e86e8",
        "name": "Request Token",
        "func": "msg.payload = {\n    \"client_id\": \"node-red-editor\",\n    \"grant_type\": \"password\",\n    \"scope\": \"*\",\n    \"username\": \"admin\",\n    \"password\": \"iplon@321\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 60,
        "wires": [
            [
                "0e613f00d3dfde32"
            ]
        ]
    },
    {
        "id": "0e613f00d3dfde32",
        "type": "http request",
        "z": "e93d40648a0e86e8",
        "name": "Token",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://192.168.88.82:1880/auth/token",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 900,
        "y": 60,
        "wires": [
            [
                "fa613c2ed69ca44d"
            ]
        ]
    },
    {
        "id": "fa613c2ed69ca44d",
        "type": "function",
        "z": "e93d40648a0e86e8",
        "name": "Confirm token",
        "func": "// get the status of the request\nvar status = msg.statusCode;\n//var token = {};\nvar token = '';\nmsg.headers ={};\n\n//let node = feedback;\n\nswitch(status){\n    case 200:\n        node.log(\"Secure restart\");\n        token = JSON.parse(msg.payload);\n        token = 'Bearer '+token.access_token;\n        msg.headers = {\n            \"Authorization\": token,\n            \"Node-RED-Deployment-Type\":\"reload\"\n        }\nmsg.payload =\"\";\n        break;\n    case 204:\n        node.log(\"Secure without restart\");\n        global.set('result','\tSuccess - with no further content');\n        break;\n    case 400:\n        node.warn(\"Bad request\");\n        break;\n    case 401:\n        node.warn(\"Not authorized\");\n        break;\n    case 403:\n        node.warn(\"Forbidden\");\n        break;\n    case 404:\n        node.log(\"Unsecure restart\");\n        msg.headers = {\n            \"Node-RED-Deployment-Type\":\"reload\"\n        }\n        break;\n    case 409:\n        node.warn(\"Version mismatch\");\n        break;\n    case 500:\n        node.error(\"Server Error\");\n        break;\n    default:\n        node.warn(\"Unknown Error\");\n       break;\n}\n\nmsg.payload = \"\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 60,
        "wires": [
            [
                "8ebd508f0c691664"
            ]
        ],
        "info": "Restart of Node-Red flows.\nWill check if the action needs security or not.\nNote: if the first 5 attemps return a statuscode 403 'forbidden'\nthen the server will break and only way to recover is then to\nrestart the service"
    },
    {
        "id": "8ebd508f0c691664",
        "type": "http request",
        "z": "e93d40648a0e86e8",
        "name": "Restart",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://192.168.88.82:1880/flows",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1210,
        "y": 60,
        "wires": [
            [
                "0c09e84479a03b7a"
            ]
        ]
    },
    {
        "id": "0c09e84479a03b7a",
        "type": "debug",
        "z": "e93d40648a0e86e8",
        "name": "debug 1689",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1360,
        "y": 60,
        "wires": []
    },
    {
        "id": "fa5f77394f92df37",
        "type": "switch",
        "z": "e93d40648a0e86e8",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "error",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "no error",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 600,
        "y": 60,
        "wires": [
            [
                "9d4700ed5f574d6a"
            ],
            []
        ]
    },
    {
        "id": "d5291b36218c6b1b",
        "type": "debug",
        "z": "e93d40648a0e86e8",
        "name": "debug 1693",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 390,
        "y": 120,
        "wires": []
    },
    {
        "id": "ef58bbd0c453efb7",
        "type": "influxdb batch",
        "z": "e93d40648a0e86e8",
        "d": true,
        "influxdb": "33f460a4c4855dbc",
        "precision": "",
        "retentionPolicy": "",
        "name": "influx",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "iplon",
        "bucket": "iGoT",
        "x": 890,
        "y": 400,
        "wires": []
    },
    {
        "id": "bfb78e1d4b5facdb",
        "type": "debug",
        "z": "e93d40648a0e86e8",
        "name": "debug 1699",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1770,
        "y": 660,
        "wires": []
    },
    {
        "id": "fdb8e4fd94d680eb",
        "type": "debug",
        "z": "e93d40648a0e86e8",
        "name": "debug 1770",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1730,
        "y": 1200,
        "wires": []
    },
    {
        "id": "1d3d94b49bffb9fb",
        "type": "ui_table",
        "z": "e93d40648a0e86e8",
        "group": "df745a17db2525a8",
        "name": "read_value",
        "order": 1,
        "width": "6",
        "height": "10",
        "columns": [
            {
                "field": "register",
                "title": "Address",
                "width": "60%",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "value",
                "title": "Value",
                "width": "40%",
                "align": "right",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            }
        ],
        "outputs": 0,
        "cts": false,
        "x": 1150,
        "y": 300,
        "wires": []
    },
    {
        "id": "90fb0ba76fdd56f0",
        "type": "ui_table",
        "z": "e93d40648a0e86e8",
        "group": "af6945031e13e295",
        "name": "set_value",
        "order": 1,
        "width": 6,
        "height": 10,
        "columns": [
            {
                "field": "register",
                "title": "Address",
                "width": "50%",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "value",
                "title": "Value",
                "width": "50%",
                "align": "right",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            }
        ],
        "outputs": 0,
        "cts": false,
        "x": 1420,
        "y": 520,
        "wires": []
    },
    {
        "id": "7e246146dc9aeefd",
        "type": "ui_switch",
        "z": "e93d40648a0e86e8",
        "name": "",
        "label": "QAC",
        "tooltip": "",
        "group": "8decb3498592097b",
        "order": 3,
        "width": 3,
        "height": 1,
        "passthru": true,
        "decouple": "false",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 130,
        "y": 820,
        "wires": [
            [
                "5768992bbdc8d783"
            ]
        ]
    },
    {
        "id": "8b821dc2a3d1cac9",
        "type": "ui_switch",
        "z": "e93d40648a0e86e8",
        "name": "",
        "label": "PF",
        "tooltip": "",
        "group": "8decb3498592097b",
        "order": 5,
        "width": 3,
        "height": 1,
        "passthru": true,
        "decouple": "false",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 170,
        "y": 920,
        "wires": [
            [
                "ead2fc52b32756e4"
            ]
        ]
    },
    {
        "id": "dc7bddc6ae14070c",
        "type": "ui_switch",
        "z": "e93d40648a0e86e8",
        "name": "",
        "label": "UAC12",
        "tooltip": "",
        "group": "8decb3498592097b",
        "order": 7,
        "width": 3,
        "height": 1,
        "passthru": true,
        "decouple": "false",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 140,
        "y": 1020,
        "wires": [
            [
                "ee076ce674e85ab6"
            ]
        ]
    },
    {
        "id": "f9c5f1537281d05d",
        "type": "ui_switch",
        "z": "e93d40648a0e86e8",
        "name": "",
        "label": "UAC23",
        "tooltip": "",
        "group": "8decb3498592097b",
        "order": 9,
        "width": 3,
        "height": 1,
        "passthru": true,
        "decouple": "false",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 140,
        "y": 1120,
        "wires": [
            [
                "8b6dbd1e7d727af1"
            ]
        ]
    },
    {
        "id": "91320b6a55914a17",
        "type": "ui_switch",
        "z": "e93d40648a0e86e8",
        "name": "",
        "label": "UAC31",
        "tooltip": "",
        "group": "8decb3498592097b",
        "order": 11,
        "width": 3,
        "height": 1,
        "passthru": true,
        "decouple": "false",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 140,
        "y": 1220,
        "wires": [
            [
                "b15cbd8e2a686bcb"
            ]
        ]
    },
    {
        "id": "22cdb9ec00129678",
        "type": "ui_switch",
        "z": "e93d40648a0e86e8",
        "name": "",
        "label": "PAC",
        "tooltip": "",
        "group": "8decb3498592097b",
        "order": 1,
        "width": 3,
        "height": 1,
        "passthru": true,
        "decouple": "false",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "1",
        "onvalueType": "num",
        "onicon": "",
        "oncolor": "",
        "offvalue": "0",
        "offvalueType": "num",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 150,
        "y": 720,
        "wires": [
            [
                "6b7008035608e884"
            ]
        ]
    },
    {
        "id": "3ec926b06d4db772",
        "type": "ui_switch",
        "z": "e93d40648a0e86e8",
        "name": "",
        "label": "IAC3",
        "tooltip": "",
        "group": "8decb3498592097b",
        "order": 19,
        "width": 3,
        "height": 1,
        "passthru": true,
        "decouple": "false",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 130,
        "y": 1620,
        "wires": [
            [
                "23040c388ec93bee"
            ]
        ]
    },
    {
        "id": "9de064152be7145b",
        "type": "ui_switch",
        "z": "e93d40648a0e86e8",
        "name": "",
        "label": "IAC1",
        "tooltip": "",
        "group": "8decb3498592097b",
        "order": 15,
        "width": 3,
        "height": 1,
        "passthru": true,
        "decouple": "false",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 130,
        "y": 1420,
        "wires": [
            [
                "45ca247c2a6b4c59"
            ]
        ]
    },
    {
        "id": "11cbbbec8cb25f6a",
        "type": "ui_switch",
        "z": "e93d40648a0e86e8",
        "name": "",
        "label": "FAC",
        "tooltip": "",
        "group": "8decb3498592097b",
        "order": 13,
        "width": 3,
        "height": 1,
        "passthru": true,
        "decouple": "false",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 130,
        "y": 1320,
        "wires": [
            [
                "cff0936b8247ed11"
            ]
        ]
    },
    {
        "id": "8af7b93869a3a302",
        "type": "ui_switch",
        "z": "e93d40648a0e86e8",
        "name": "",
        "label": "IAC2",
        "tooltip": "",
        "group": "8decb3498592097b",
        "order": 17,
        "width": 3,
        "height": 1,
        "passthru": true,
        "decouple": "false",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 130,
        "y": 1520,
        "wires": [
            [
                "f71e7de35055f30c"
            ]
        ]
    },
    {
        "id": "141f68735a4d7a82",
        "type": "ui_text_input",
        "z": "e93d40648a0e86e8",
        "name": "",
        "label": "",
        "tooltip": "",
        "group": "8decb3498592097b",
        "order": 4,
        "width": 3,
        "height": 1,
        "passthru": true,
        "mode": "number",
        "delay": "1000",
        "topic": "topic",
        "sendOnBlur": false,
        "className": "",
        "topicType": "msg",
        "x": 150,
        "y": 780,
        "wires": [
            [
                "c336ad57240d496f"
            ]
        ]
    },
    {
        "id": "6a803052b97f96e9",
        "type": "ui_text_input",
        "z": "e93d40648a0e86e8",
        "name": "",
        "label": "",
        "tooltip": "",
        "group": "8decb3498592097b",
        "order": 2,
        "width": 3,
        "height": 1,
        "passthru": true,
        "mode": "number",
        "delay": "1000",
        "topic": "topic",
        "sendOnBlur": false,
        "className": "",
        "topicType": "msg",
        "x": 150,
        "y": 680,
        "wires": [
            [
                "278f00b6fd3da558"
            ]
        ]
    },
    {
        "id": "d7331e2198fc4f80",
        "type": "ui_text_input",
        "z": "e93d40648a0e86e8",
        "name": "",
        "label": "",
        "tooltip": "",
        "group": "8decb3498592097b",
        "order": 6,
        "width": 3,
        "height": 1,
        "passthru": true,
        "mode": "number",
        "delay": "1000",
        "topic": "topic",
        "sendOnBlur": false,
        "className": "",
        "topicType": "msg",
        "x": 150,
        "y": 880,
        "wires": [
            [
                "5b42f89da88919c6"
            ]
        ]
    },
    {
        "id": "c6a6cb245767b21a",
        "type": "ui_text_input",
        "z": "e93d40648a0e86e8",
        "name": "",
        "label": "",
        "tooltip": "",
        "group": "8decb3498592097b",
        "order": 8,
        "width": 3,
        "height": 1,
        "passthru": true,
        "mode": "number",
        "delay": "1000",
        "topic": "topic",
        "sendOnBlur": false,
        "className": "",
        "topicType": "msg",
        "x": 150,
        "y": 980,
        "wires": [
            [
                "7054319e2164045a"
            ]
        ]
    },
    {
        "id": "87071839bb40b921",
        "type": "ui_text_input",
        "z": "e93d40648a0e86e8",
        "name": "",
        "label": "",
        "tooltip": "",
        "group": "8decb3498592097b",
        "order": 10,
        "width": 3,
        "height": 1,
        "passthru": true,
        "mode": "number",
        "delay": "1000",
        "topic": "topic",
        "sendOnBlur": false,
        "className": "",
        "topicType": "msg",
        "x": 150,
        "y": 1080,
        "wires": [
            [
                "d5b05985fcbb6374"
            ]
        ]
    },
    {
        "id": "1976520bef8818b6",
        "type": "ui_text_input",
        "z": "e93d40648a0e86e8",
        "name": "",
        "label": "",
        "tooltip": "",
        "group": "8decb3498592097b",
        "order": 12,
        "width": 3,
        "height": 1,
        "passthru": true,
        "mode": "number",
        "delay": "1000",
        "topic": "topic",
        "sendOnBlur": false,
        "className": "",
        "topicType": "msg",
        "x": 130,
        "y": 1180,
        "wires": [
            [
                "af9d21c04e1fbff3"
            ]
        ]
    },
    {
        "id": "7a6797748675c650",
        "type": "ui_text_input",
        "z": "e93d40648a0e86e8",
        "name": "",
        "label": "",
        "tooltip": "",
        "group": "8decb3498592097b",
        "order": 16,
        "width": 3,
        "height": 1,
        "passthru": true,
        "mode": "number",
        "delay": "1000",
        "topic": "topic",
        "sendOnBlur": false,
        "className": "",
        "topicType": "msg",
        "x": 150,
        "y": 1380,
        "wires": [
            [
                "ab86959508f271ca"
            ]
        ]
    },
    {
        "id": "faa9f00d314e6fd4",
        "type": "ui_text_input",
        "z": "e93d40648a0e86e8",
        "name": "",
        "label": "",
        "tooltip": "",
        "group": "8decb3498592097b",
        "order": 14,
        "width": 3,
        "height": 1,
        "passthru": true,
        "mode": "number",
        "delay": "1000",
        "topic": "topic",
        "sendOnBlur": false,
        "className": "",
        "topicType": "msg",
        "x": 130,
        "y": 1280,
        "wires": [
            [
                "cf45fda148bcd44a"
            ]
        ]
    },
    {
        "id": "b74d330cf150bcb5",
        "type": "ui_text_input",
        "z": "e93d40648a0e86e8",
        "name": "",
        "label": "",
        "tooltip": "",
        "group": "8decb3498592097b",
        "order": 18,
        "width": 3,
        "height": 1,
        "passthru": true,
        "mode": "number",
        "delay": "1000",
        "topic": "topic",
        "sendOnBlur": false,
        "className": "",
        "topicType": "msg",
        "x": 150,
        "y": 1480,
        "wires": [
            [
                "3807042f6c051b22"
            ]
        ]
    },
    {
        "id": "1a3bc8106ca55880",
        "type": "ui_text_input",
        "z": "e93d40648a0e86e8",
        "name": "",
        "label": "",
        "tooltip": "",
        "group": "8decb3498592097b",
        "order": 20,
        "width": 3,
        "height": 1,
        "passthru": true,
        "mode": "number",
        "delay": "1000",
        "topic": "topic",
        "sendOnBlur": false,
        "className": "",
        "topicType": "msg",
        "x": 150,
        "y": 1580,
        "wires": [
            [
                "3746d3e039d9a1a3"
            ]
        ]
    },
    {
        "id": "cf7ed6b0fb15c171",
        "type": "csv",
        "z": "e93d40648a0e86e8",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 450,
        "y": 240,
        "wires": [
            [
                "35680d5d60240db9"
            ]
        ]
    },
    {
        "id": "a817e02b909253d9",
        "type": "Modbus-Read",
        "z": "e93d40648a0e86e8",
        "name": "EM_Read",
        "showStatusActivities": false,
        "showErrors": true,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "8ba65460e8b9e662",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 740,
        "y": 240,
        "wires": [
            [
                "019f918c6daba480"
            ],
            []
        ]
    },
    {
        "id": "35680d5d60240db9",
        "type": "function",
        "z": "e93d40648a0e86e8",
        "name": "function 533",
        "func": "for (var i = 0; i < msg.payload.length; i++)\n{    \n             \n        var query = {}\n        query.payload = { 'fc': msg.payload[i].fun_code, 'unitid': msg.payload[i].unit_id, 'address': msg.payload[i].read_reg_id, 'quantity': msg.payload[i].addr_qty, 'datatype' : msg.payload[i].read_reg_type};\n        query.topic = msg.payload[i]\n        node.send(query);  \n\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 240,
        "wires": [
            [
                "a817e02b909253d9"
            ]
        ]
    },
    {
        "id": "019f918c6daba480",
        "type": "join",
        "z": "e93d40648a0e86e8",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "",
        "propertyType": "full",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "10",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 870,
        "y": 240,
        "wires": [
            [
                "390a111ded770cd1",
                "f544d8b6bd44d7be",
                "03323018e57398f9"
            ]
        ]
    },
    {
        "id": "d55f695881d16588",
        "type": "debug",
        "z": "e93d40648a0e86e8",
        "name": "debug 1579",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1170,
        "y": 240,
        "wires": []
    },
    {
        "id": "390a111ded770cd1",
        "type": "function",
        "z": "e93d40648a0e86e8",
        "name": "VR_EM",
        "func": "var obj={};\nfor (var i = 0; i < msg.payload.length; i++) \n{\n    var tag_val = msg.payload[i].topic.b + '.' + msg.payload[i].topic.d + '.' + msg.payload[i].topic.f\n    var value = msg.payload[i].payload.value\n    global.set(tag_val, value)\n    obj.payload = {tag_val:tag_val, value:value}\n    node.send(obj)\n}\nreturn null; ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 240,
        "wires": [
            [
                "d55f695881d16588"
            ]
        ]
    },
    {
        "id": "f544d8b6bd44d7be",
        "type": "debug",
        "z": "e93d40648a0e86e8",
        "name": "debug 1772",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1010,
        "y": 160,
        "wires": []
    },
    {
        "id": "03323018e57398f9",
        "type": "function",
        "z": "e93d40648a0e86e8",
        "name": "function 534",
        "func": "let array = []\nfor(var i = 0; i < msg.payload.length; i++)\n{\n    var obj = {}\n    obj = { register: msg.payload[i].topic.read_reg_id, value: msg.payload[i].payload.value }\n\n    array.push(obj)\n}\nmsg.payload = array \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 280,
        "wires": [
            [
                "1d3d94b49bffb9fb",
                "09a7d85e553c5265"
            ]
        ]
    },
    {
        "id": "09a7d85e553c5265",
        "type": "debug",
        "z": "e93d40648a0e86e8",
        "name": "debug 1773",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1390,
        "y": 300,
        "wires": []
    },
    {
        "id": "5f6da75b2598778f",
        "type": "debug",
        "z": "0dc0138bb7f97736",
        "name": "debug 1391",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 830,
        "y": 200,
        "wires": []
    },
    {
        "id": "19d00b2b1fb28294",
        "type": "file",
        "z": "0dc0138bb7f97736",
        "name": "config file write",
        "filename": "/mnt/docker_common/node-red/config.csv",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 660,
        "y": 200,
        "wires": [
            [
                "5f6da75b2598778f"
            ]
        ]
    },
    {
        "id": "4529bd544f2994c7",
        "type": "inject",
        "z": "0dc0138bb7f97736",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 340,
        "y": 200,
        "wires": [
            [
                "fb918b0ee359794a"
            ]
        ]
    },
    {
        "id": "fb918b0ee359794a",
        "type": "template",
        "z": "0dc0138bb7f97736",
        "name": "config.csv",
        "field": "payload",
        "fieldType": "msg",
        "format": "text",
        "syntax": "mustache",
        "template": "s.no,tag_name,tag_id,value\n1,SEL_PC_RX,13116,1\n2,PAC_ON_OFF_1,13056,0\n3,QAC_ON_OFF_1,13088,0\n4,UAC_ON_OFF_1,13128,0\n5,FAC_ON_OFF_1,13028,0\n6,PF_ON_OFF_1,13069,0\n7,RAMP_ON_OFF_1,13153,0\n\n\n",
        "output": "str",
        "x": 480,
        "y": 200,
        "wires": [
            [
                "586d7d17c7af814f",
                "19d00b2b1fb28294",
                "28be3fea337aa503"
            ]
        ]
    },
    {
        "id": "98847b048e1ba523",
        "type": "comment",
        "z": "0dc0138bb7f97736",
        "name": "config.csv",
        "info": " ",
        "x": 180,
        "y": 140,
        "wires": []
    },
    {
        "id": "50ace997e2bda843",
        "type": "http in",
        "z": "0dc0138bb7f97736",
        "name": "",
        "url": "/endpoint/grafana",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 120,
        "y": 380,
        "wires": [
            [
                "bb324ce1b032f379",
                "0819481335f56f0a",
                "4684bc796112f254",
                "05de4d5aa55972e6",
                "ebdf161dadf45e41"
            ]
        ]
    },
    {
        "id": "b97672a210a2784e",
        "type": "http response",
        "z": "0dc0138bb7f97736",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 610,
        "y": 460,
        "wires": []
    },
    {
        "id": "5dfb66685fb76c3a",
        "type": "debug",
        "z": "0dc0138bb7f97736",
        "name": "debug 1392",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1630,
        "y": 380,
        "wires": []
    },
    {
        "id": "9a387a36b726a5e2",
        "type": "csv",
        "z": "0dc0138bb7f97736",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 530,
        "y": 340,
        "wires": [
            [
                "1f0ea7c1f7d508fc"
            ]
        ]
    },
    {
        "id": "d9b3e823f9f1f520",
        "type": "change",
        "z": "0dc0138bb7f97736",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "grafana",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 770,
        "y": 380,
        "wires": [
            [
                "e854e9f3b57be5b7"
            ]
        ]
    },
    {
        "id": "564cbcb5470543d4",
        "type": "change",
        "z": "0dc0138bb7f97736",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "fields",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 790,
        "y": 340,
        "wires": [
            [
                "f022a41ab401dd79"
            ]
        ]
    },
    {
        "id": "1f0ea7c1f7d508fc",
        "type": "function",
        "z": "0dc0138bb7f97736",
        "name": "json",
        "func": "var obj = {};\n\nobj.payload = {\n    id: msg.payload.tag_id,\n    name: msg.payload.tag_name,\n    value: msg.payload.value\n}\n\nnode.send(obj)\n\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 340,
        "wires": [
            [
                "564cbcb5470543d4"
            ]
        ]
    },
    {
        "id": "f022a41ab401dd79",
        "type": "join",
        "z": "0dc0138bb7f97736",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "7",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 930,
        "y": 340,
        "wires": [
            [
                "e854e9f3b57be5b7"
            ]
        ]
    },
    {
        "id": "e854e9f3b57be5b7",
        "type": "function",
        "z": "0dc0138bb7f97736",
        "name": "combine",
        "func": "context.data = context.data || {};\nswitch (msg.topic) {\n    case \"grafana\":\n        context.data.grafana = msg.payload;\n        msg = null;\n        break;\n    case \"fields\":\n        context.data.fields = msg.payload;\n        msg = null;\n        break;\n    case \"status\":\n        context.data.status = msg.payload;\n        msg = null;\n        break;\n}\nif (context.data.grafana != null && context.data.fields != null && context.data.status != null) {\n    var data_combine = {\n        \"grafana\": context.data.grafana,\n        \"fields\": context.data.fields,\n        \"status\": context.data.status,\n\n    }\n    context.data = null\n    return { payload: data_combine };\n}  \n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 380,
        "wires": [
            [
                "1df9d19644b186c4",
                "d1a800baea59c09a",
                "521c713fd2a75714"
            ]
        ]
    },
    {
        "id": "c2054523a6ec58e8",
        "type": "file",
        "z": "0dc0138bb7f97736",
        "name": "conf file WR",
        "filename": "/mnt/docker_common/node-red/config.csv",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1450,
        "y": 380,
        "wires": [
            [
                "5dfb66685fb76c3a"
            ]
        ]
    },
    {
        "id": "03af0a15ad8bb997",
        "type": "csv",
        "z": "0dc0138bb7f97736",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "all",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 1270,
        "y": 380,
        "wires": [
            [
                "bb34eb6ce2c2dae4",
                "c2054523a6ec58e8"
            ]
        ]
    },
    {
        "id": "bb324ce1b032f379",
        "type": "file in",
        "z": "0dc0138bb7f97736",
        "name": "read csv",
        "filename": "/mnt/docker_common/node-red/config.csv",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 400,
        "y": 340,
        "wires": [
            [
                "9a387a36b726a5e2"
            ]
        ]
    },
    {
        "id": "3e0b60d9bc33aa10",
        "type": "http request",
        "z": "0dc0138bb7f97736",
        "name": "API post",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 320,
        "y": 420,
        "wires": [
            [
                "91442574aed18905",
                "b6dc862f71359b4d",
                "d32f09dba702de5a"
            ]
        ]
    },
    {
        "id": "4684bc796112f254",
        "type": "function",
        "z": "0dc0138bb7f97736",
        "name": "API body",
        "func": "var url = \"http://192.168.90.84:5000/scaback0001/setprop?\"\nvar val = parseFloat(msg.payload.val)\nvar data = \"id=\" + msg.payload.id + \"&\" + \"val=\" + val\nmsg.url = url + data\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 420,
        "wires": [
            [
                "3e0b60d9bc33aa10"
            ]
        ]
    },
    {
        "id": "1df9d19644b186c4",
        "type": "function",
        "z": "0dc0138bb7f97736",
        "name": "psql",
        "func": "for(var i = 0; i < msg.payload.grafana.length; i++)\n{\n    \n    var obj = {};\n    var time = msg.payload.grafana[i].time\n    var timestamp = time + 19800\n    var dateUTC = new Date(timestamp).toISOString();\n\n    obj.payload = {\n        date: dateUTC,\n        timestamp: msg.payload.grafana[i].source,\n        source: msg.payload.grafana[i].server,\n        user: msg.payload.grafana[i].user,\n        mode: msg.payload.grafana[i].mode,\n        tag_id: msg.payload.grafana[i].id,\n        tag_name: msg.payload.grafana[i].tag_name,\n        type: msg.payload.grafana[i].type,\n        value: msg.payload.grafana[i].val,\n        status: msg.payload.status[i].status,\n        control: msg.payload.grafana[i].control\n    }\n    node.send(obj)\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 340,
        "wires": [
            [
                "bd5edbcfd28a7335",
                "32fb56de5146e9d1"
            ]
        ]
    },
    {
        "id": "bd5edbcfd28a7335",
        "type": "template",
        "z": "0dc0138bb7f97736",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "INSERT INTO public.postgres(\"SOURCE\", \"USER\", \"DATE\", \"TIMESTAMP\", \"CONTROL\", \"TYPE\", \"TAG_ID\", \"TAG_NAME\", \"MODE\", \"VALUE\", \"STATUS\") VALUES ('{{payload.source}}', '{{payload.user}}', '{{payload.date}}', '{{payload.timestamp}}', '{{payload.control}}','{{payload.type}}', '{{payload.tag_id}}', '{{payload.tag_name}}', '{{payload.mode}}', '{{payload.value}}', '{{payload.status}}')",
        "output": "str",
        "x": 1220,
        "y": 340,
        "wires": [
            [
                "cc098258a4f09af0"
            ]
        ]
    },
    {
        "id": "91442574aed18905",
        "type": "function",
        "z": "0dc0138bb7f97736",
        "name": "result",
        "func": "var url = msg.url\nvar ip = url.match(/(?:https?|ftp):\\/\\/(\\d+\\.\\d+\\.\\d+\\.\\d+)/i);\nif (ip[1] == \"192.168.90.84\")\n{\n    if (msg.payload == \"result=true\")\n    {\n\n        msg.payload = {\n            server: \"primary\",\n            status: \"success\"\n        }\n         \n    }\n    else\n    {\n        msg.payload = {\n            server: \"primary\",\n            status: \"failed\"\n        }\n         \n    }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 420,
        "wires": [
            [
                "2f9fcc6bd421fadc"
            ]
        ]
    },
    {
        "id": "f67aa27462dd1d29",
        "type": "change",
        "z": "0dc0138bb7f97736",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "status",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 770,
        "y": 420,
        "wires": [
            [
                "e854e9f3b57be5b7"
            ]
        ]
    },
    {
        "id": "b6dc862f71359b4d",
        "type": "function",
        "z": "0dc0138bb7f97736",
        "name": "code",
        "func": "if (msg.payload == \"result=true\")\n{\n\n    msg.statusCode = 200\n}\nelse \n{\n    msg.statusCode = 404\n}\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 460,
        "wires": [
            [
                "b97672a210a2784e"
            ]
        ]
    },
    {
        "id": "df5463984335285b",
        "type": "debug",
        "z": "0dc0138bb7f97736",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1430,
        "y": 200,
        "wires": []
    },
    {
        "id": "f23226fa0fd9dfcf",
        "type": "inject",
        "z": "0dc0138bb7f97736",
        "name": "create table",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "CREATE TABLE public.postgres( \"S_NO\" serial PRIMARY KEY, \"SOURCE\" text, \"USER\" text, \"DATE\" text, \"TIMESTAMP\" text, \"CONTROL\" text, \"TYPE\" text, \"TAG_ID\" text, \"TAG_NAME\" text, \"MODE\" text, \"VALUE\" numeric, \"STATUS\" text) WITH  ( OIDS=FALSE)",
        "payloadType": "str",
        "x": 1110,
        "y": 200,
        "wires": [
            [
                "cde9f67a7ba96fa7"
            ]
        ]
    },
    {
        "id": "e5cde27b0a8f8820",
        "type": "debug",
        "z": "0dc0138bb7f97736",
        "name": "debug 1636",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1510,
        "y": 340,
        "wires": []
    },
    {
        "id": "32fb56de5146e9d1",
        "type": "debug",
        "z": "0dc0138bb7f97736",
        "name": "debug 1637",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1230,
        "y": 300,
        "wires": []
    },
    {
        "id": "0819481335f56f0a",
        "type": "join",
        "z": "0dc0138bb7f97736",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "6",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 610,
        "y": 380,
        "wires": [
            [
                "d9b3e823f9f1f520"
            ]
        ]
    },
    {
        "id": "d32f09dba702de5a",
        "type": "debug",
        "z": "0dc0138bb7f97736",
        "name": "debug 1738",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 510,
        "y": 500,
        "wires": []
    },
    {
        "id": "2f9fcc6bd421fadc",
        "type": "join",
        "z": "0dc0138bb7f97736",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "6",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 610,
        "y": 420,
        "wires": [
            [
                "f67aa27462dd1d29"
            ]
        ]
    },
    {
        "id": "05de4d5aa55972e6",
        "type": "debug",
        "z": "0dc0138bb7f97736",
        "name": "debug 1742",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 190,
        "y": 340,
        "wires": []
    },
    {
        "id": "ebdf161dadf45e41",
        "type": "function",
        "z": "0dc0138bb7f97736",
        "name": "function 135",
        "func": "var val = msg.payload.val\nmsg.payload = {value:val}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "cde9f67a7ba96fa7",
        "type": "postgres",
        "z": "0dc0138bb7f97736",
        "postgresdb": "4abfff5724dcbdfa",
        "name": "",
        "output": true,
        "perrow": false,
        "rowspermsg": "1",
        "return_on_error": false,
        "limit_queries": "0",
        "limit_by": "payload",
        "limit_value": "1",
        "limit_drop_intermediate": false,
        "limit_drop_if_in_queue": false,
        "outputs": true,
        "x": 1260,
        "y": 200,
        "wires": [
            [
                "df5463984335285b"
            ]
        ]
    },
    {
        "id": "cc098258a4f09af0",
        "type": "postgres",
        "z": "0dc0138bb7f97736",
        "postgresdb": "4abfff5724dcbdfa",
        "name": "",
        "output": true,
        "perrow": false,
        "rowspermsg": "1",
        "return_on_error": false,
        "limit_queries": "0",
        "limit_by": "payload",
        "limit_value": "1",
        "limit_drop_intermediate": false,
        "limit_drop_if_in_queue": false,
        "outputs": true,
        "x": 1360,
        "y": 340,
        "wires": [
            [
                "e5cde27b0a8f8820"
            ]
        ]
    },
    {
        "id": "d1a800baea59c09a",
        "type": "debug",
        "z": "0dc0138bb7f97736",
        "name": "debug 1757",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1110,
        "y": 420,
        "wires": []
    },
    {
        "id": "586d7d17c7af814f",
        "type": "csv",
        "z": "0dc0138bb7f97736",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 530,
        "y": 160,
        "wires": [
            [
                "6c31446add0a3ca3"
            ]
        ]
    },
    {
        "id": "0e3d56517418e83f",
        "type": "debug",
        "z": "0dc0138bb7f97736",
        "name": "debug 1759",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 990,
        "y": 160,
        "wires": []
    },
    {
        "id": "72bc278d116a5e30",
        "type": "function",
        "z": "0dc0138bb7f97736",
        "name": "global_set_point",
        "func": "for (var i = 0; i < msg.payload.length; i++) \n{\n    var tag_name = msg.payload[i].tag_name\n    var value = msg.payload[i].value\n    global.set(tag_name,value)\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 160,
        "wires": [
            [
                "0e3d56517418e83f"
            ]
        ]
    },
    {
        "id": "6c31446add0a3ca3",
        "type": "join",
        "z": "0dc0138bb7f97736",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "7",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 650,
        "y": 160,
        "wires": [
            [
                "72bc278d116a5e30",
                "6bc8387587e00d0b"
            ]
        ]
    },
    {
        "id": "6bc8387587e00d0b",
        "type": "debug",
        "z": "0dc0138bb7f97736",
        "name": "debug 1760",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 850,
        "y": 100,
        "wires": []
    },
    {
        "id": "15121aec718ef673",
        "type": "catch",
        "z": "0dc0138bb7f97736",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 540,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "28be3fea337aa503",
        "type": "debug",
        "z": "0dc0138bb7f97736",
        "name": "debug 1762",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 610,
        "y": 260,
        "wires": []
    },
    {
        "id": "bb34eb6ce2c2dae4",
        "type": "debug",
        "z": "0dc0138bb7f97736",
        "name": "debug 1763",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1450,
        "y": 420,
        "wires": []
    },
    {
        "id": "644397090ba44884",
        "type": "function",
        "z": "0dc0138bb7f97736",
        "name": "file ",
        "func": "let array = []\nvar obj = {}\nfor (var j = 0; j < msg.payload.grafana.length; j++) \n{\n    var searchId = msg.payload.grafana[j].id;\n    var replacementValue = msg.payload.grafana[j].val;\n    for (var i = 0; i < msg.payload.fields.length; i++) \n    {\n   \n        if (msg.payload.fields[i].id === searchId) \n        {            \n           \n            var tag_name = msg.payload.fields[i].name\n            var tag_id = msg.payload.fields[i].id\n            var value = replacementValue\n            global.set(tag_name,value)              \n            \n        }\n    }   \n        \n    \n}\n\nfor (var k = 0; k < msg.payload.fields.length; k++)\n{\n    var get_tag_name = msg.payload.fields[k].name\n    var get_value = global.get(get_tag_name)\n    var obj1 = {}\n     obj1 = {\n        S_No: k,\n        tag_name: get_tag_name,\n        tag_id: msg.payload.fields[k].id,\n        value: get_value\n    }\n    array.push(obj1)\n    \n}\nobj.payload = array\nnode.send(obj)\nreturn null;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "521c713fd2a75714",
        "type": "function",
        "z": "0dc0138bb7f97736",
        "name": "function 513",
        "func": "let array = []\nlet arr = []\nvar obj = {}\nfor (var i = 0; i < msg.payload.fields.length; i++) {\n    for (var j = 0; j < msg.payload.grafana.length; j++) {\n        var searchId = msg.payload.grafana[j].id;\n        var replacementValue = msg.payload.grafana[j].val;\n\n        if (msg.payload.fields[i].id === searchId) {\n            var new_value = replacementValue\n            var flag = 1\n            break;\n\n        }\n        else {\n            flag = 0;\n        }\n\n    }\n    var tag_name = msg.payload.fields[i].name\n    if (flag == 1) {\n        global.set(tag_name, new_value)\n        arr.push(tag_name)\n    }\n    else {\n        var value = msg.payload.fields[i].value\n        global.set(tag_name, value)\n        arr.push(tag_name)\n    }\n\n\n}\n\n\nfor (var k = 0; k < msg.payload.fields.length; k++) {\n    var get_tag_name = msg.payload.fields[k].name\n    var get_value = global.get(get_tag_name)\n    var obj1 = {}\n    obj1 = {\n        S_No: k,\n        tag_name: get_tag_name,\n        tag_id: msg.payload.fields[k].id,\n        value: get_value\n    }\n    array.push(obj1)\n\n}\nobj.payload = array\nnode.send(obj)\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1110,
        "y": 380,
        "wires": [
            [
                "03af0a15ad8bb997"
            ]
        ]
    }
]